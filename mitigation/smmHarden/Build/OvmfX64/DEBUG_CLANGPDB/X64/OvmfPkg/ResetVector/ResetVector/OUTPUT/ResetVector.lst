     1                                  ;------------------------------------------------------------------------------
     2                                  ; @file
     3                                  ; This file includes all other code files to assemble the reset vector code
     4                                  ;
     5                                  ; Copyright (c) 2008 - 2013, Intel Corporation. All rights reserved.<BR>
     6                                  ; Copyright (c) 2020, Advanced Micro Devices, Inc. All rights reserved.<BR>
     7                                  ; SPDX-License-Identifier: BSD-2-Clause-Patent
     8                                  ;
     9                                  ;------------------------------------------------------------------------------
    10                                  
    11                                  ;
    12                                  ; If neither ARCH_IA32 nor ARCH_X64 are defined, then try to include
    13                                  ; Base.h to use the C pre-processor to determine the architecture.
    14                                  ;
    15                                  %ifndef ARCH_IA32
    16                                    %ifndef ARCH_X64
    17                                  
    18                                  
    19                                  
    20                                  
    21                                        %define ARCH_X64
    22                                  
    23                                    %endif
    24                                  %endif
    25                                  
    26                                  %ifdef ARCH_IA32
    27                                    %ifdef ARCH_X64
    28                                      %error "Only one of ARCH_IA32 or ARCH_X64 can be defined."
    29                                    %endif
    30                                  %elifdef ARCH_X64
    31                                  %else
    32                                    %error "Either ARCH_IA32 or ARCH_X64 must be defined."
    33                                  %endif
    34                                  
    35                                  %include "CommonMacros.inc"
    36                              <1> ;------------------------------------------------------------------------------
    37                              <1> ; @file
    38                              <1> ; Common macros used in the ResetVector VTF module.
    39                              <1> ;
    40                              <1> ; Copyright (c) 2008, Intel Corporation. All rights reserved.<BR>
    41                              <1> ; SPDX-License-Identifier: BSD-2-Clause-Patent
    42                              <1> ;
    43                              <1> ;------------------------------------------------------------------------------
    44                              <1> 
    45                              <1> %define ADDR16_OF(x) (0x10000 - fourGigabytes + x)
    46                              <1> %define ADDR_OF(x) (0x100000000 - fourGigabytes + x)
    47                              <1> 
    48                              <1> %macro  OneTimeCall 1
    49                              <1>     jmp     %1
    50                              <1> %1 %+ OneTimerCallReturn:
    51                              <1> %endmacro
    52                              <1> 
    53                              <1> %macro  OneTimeCallRet 1
    54                              <1>     jmp     %1 %+ OneTimerCallReturn
    55                              <1> %endmacro
    56                              <1> 
    57                              <1> StartOfResetVectorCode:
    58                              <1> 
    59                              <1> %define ADDR_OF_START_OF_RESET_CODE ADDR_OF(StartOfResetVectorCode)
    60                              <1> 
    36                                  
    37                                  %include "PostCodes.inc"
    38                              <1> ;------------------------------------------------------------------------------
    39                              <1> ; @file
    40                              <1> ; Definitions of POST CODES for the reset vector module
    41                              <1> ;
    42                              <1> ; Copyright (c) 2009, Intel Corporation. All rights reserved.<BR>
    43                              <1> ; SPDX-License-Identifier: BSD-2-Clause-Patent
    44                              <1> ;
    45                              <1> ;------------------------------------------------------------------------------
    46                              <1> 
    47                              <1> %define POSTCODE_16BIT_MODE     0x16
    48                              <1> %define POSTCODE_32BIT_MODE     0x32
    49                              <1> %define POSTCODE_64BIT_MODE     0x64
    50                              <1> 
    51                              <1> %define POSTCODE_BFV_NOT_FOUND  0xb0
    52                              <1> %define POSTCODE_BFV_FOUND      0xb1
    53                              <1> 
    54                              <1> %define POSTCODE_SEC_NOT_FOUND  0xf0
    55                              <1> %define POSTCODE_SEC_FOUND      0xf1
    56                              <1> 
    38                                  
    39                                  %ifdef DEBUG_PORT80
    40                                    %include "Port80Debug.asm"
    41                                  %elifdef DEBUG_SERIAL
    42                                    %include "SerialDebug.asm"
    43                                  %else
    44                                    %include "DebugDisabled.asm"
    45                              <1> ;------------------------------------------------------------------------------
    46                              <1> ; @file
    47                              <1> ; Debug disabled
    48                              <1> ;
    49                              <1> ; Copyright (c) 2009, Intel Corporation. All rights reserved.<BR>
    50                              <1> ; SPDX-License-Identifier: BSD-2-Clause-Patent
    51                              <1> ;
    52                              <1> ;------------------------------------------------------------------------------
    53                              <1> 
    54                              <1> BITS    16
    55                              <1> 
    56                              <1> %macro  debugInitialize 0
    57                              <1>     ;
    58                              <1>     ; No initialization is required
    59                              <1>     ;
    60                              <1> %endmacro
    61                              <1> 
    62                              <1> %macro  debugShowPostCode 1
    63                              <1> %endmacro
    64                              <1> 
    45                                  %endif
    46                                  
    47                                  %include "Ia32/SearchForBfvBase.asm"
    48                              <1> ;------------------------------------------------------------------------------
    49                              <1> ; @file
    50                              <1> ; Search for the Boot Firmware Volume (BFV) base address
    51                              <1> ;
    52                              <1> ; Copyright (c) 2008 - 2022, Intel Corporation. All rights reserved.<BR>
    53                              <1> ; SPDX-License-Identifier: BSD-2-Clause-Patent
    54                              <1> ;
    55                              <1> ;------------------------------------------------------------------------------
    56                              <1> 
    57                              <1> ;#define EFI_FIRMWARE_FILE_SYSTEM2_GUID ;  { 0x8c8ce578, 0x8a3d, 0x4f1c, { 0x99, 0x35, 0x89, 0x61, 0x85, 0xc3, 0x2d, 0xd3 } }
    59                              <1> %define FFS2_GUID_DWORD0 0x8c8ce578
    60                              <1> %define FFS2_GUID_DWORD1 0x4f1c8a3d
    61                              <1> %define FFS2_GUID_DWORD2 0x61893599
    62                              <1> %define FFS2_GUID_DWORD3 0xd32dc385
    63                              <1> 
    64                              <1> ;#define EFI_FIRMWARE_FILE_SYSTEM3_GUID ;  { 0x8c8ce578, 0x3dcb, 0x4dca, { 0xbd, 0x6f, 0x1e, 0x96, 0x89, 0xe7, 0x34, 0x9a } }
    66                              <1> %define FFS3_GUID_DWORD0 0x5473c07a
    67                              <1> %define FFS3_GUID_DWORD1 0x4dca3dcb
    68                              <1> %define FFS3_GUID_DWORD2 0x961e6fbd
    69                              <1> %define FFS3_GUID_DWORD3 0x9a34e789
    70                              <1> 
    71                              <1> BITS    32
    72                              <1> 
    73                              <1> ;
    74                              <1> ; Modified:  EAX, EBX
    75                              <1> ; Preserved: EDI, ESP
    76                              <1> ;
    77                              <1> ; @param[out]  EBP  Address of Boot Firmware Volume (BFV)
    78                              <1> ;
    79                              <1> Flat32SearchForBfvBase:
    80                              <1> 
    81 00000000 31C0                <1>     xor     eax, eax
    82                              <1> searchingForBfvHeaderLoop:
    83                              <1>     ;
    84                              <1>     ; We check for a firmware volume at every 4KB address in the top 16MB
    85                              <1>     ; just below 4GB.  (Addresses at 0xffHHH000 where H is any hex digit.)
    86                              <1>     ;
    87 00000002 2D00100000          <1>     sub     eax, 0x1000
    88 00000007 3D000000FF          <1>     cmp     eax, 0xff000000
    89 0000000C 7259                <1>     jb      searchedForBfvHeaderButNotFound
    90                              <1> 
    91                              <1>     ;
    92                              <1>     ; Check FFS3 GUID
    93                              <1>     ;
    94 0000000E 8178107AC07354      <1>     cmp     dword [eax + 0x10], FFS3_GUID_DWORD0
    95 00000015 751D                <1>     jne     searchingForFfs2Guid
    96 00000017 817814CB3DCA4D      <1>     cmp     dword [eax + 0x14], FFS3_GUID_DWORD1
    97 0000001E 7514                <1>     jne     searchingForFfs2Guid
    98 00000020 817818BD6F1E96      <1>     cmp     dword [eax + 0x18], FFS3_GUID_DWORD2
    99 00000027 750B                <1>     jne     searchingForFfs2Guid
   100 00000029 81781C89E7349A      <1>     cmp     dword [eax + 0x1c], FFS3_GUID_DWORD3
   101 00000030 7502                <1>     jne     searchingForFfs2Guid
   102 00000032 EB24                <1>     jmp     checkingFvLength
   103                              <1> 
   104                              <1> searchingForFfs2Guid:
   105                              <1>     ;
   106                              <1>     ; Check FFS2 GUID
   107                              <1>     ;
   108 00000034 81781078E58C8C      <1>     cmp     dword [eax + 0x10], FFS2_GUID_DWORD0
   109 0000003B 75C5                <1>     jne     searchingForBfvHeaderLoop
   110 0000003D 8178143D8A1C4F      <1>     cmp     dword [eax + 0x14], FFS2_GUID_DWORD1
   111 00000044 75BC                <1>     jne     searchingForBfvHeaderLoop
   112 00000046 81781899358961      <1>     cmp     dword [eax + 0x18], FFS2_GUID_DWORD2
   113 0000004D 75B3                <1>     jne     searchingForBfvHeaderLoop
   114 0000004F 81781C85C32DD3      <1>     cmp     dword [eax + 0x1c], FFS2_GUID_DWORD3
   115 00000056 75AA                <1>     jne     searchingForBfvHeaderLoop
   116                              <1> 
   117                              <1> checkingFvLength:
   118                              <1>     ;
   119                              <1>     ; Check FV Length
   120                              <1>     ;
   121 00000058 83782400            <1>     cmp     dword [eax + 0x24], 0
   122 0000005C 75A4                <1>     jne     searchingForBfvHeaderLoop
   123 0000005E 89C3                <1>     mov     ebx, eax
   124 00000060 035820              <1>     add     ebx, dword [eax + 0x20]
   125 00000063 759D                <1>     jnz     searchingForBfvHeaderLoop
   126                              <1> 
   127 00000065 EB09                <1>     jmp     searchedForBfvHeaderAndItWasFound
   128                              <1> 
   129                              <1> searchedForBfvHeaderButNotFound:
   130                              <1>     ;
   131                              <1>     ; Hang if the SEC entry point was not found
   132                              <1>     ;
   133                              <1>     debugShowPostCode POSTCODE_BFV_NOT_FOUND
   134                              <1> 
   135                              <1>     ;
   136                              <1>     ; 0xbfbfbfbf in the EAX & EBP registers helps signal what failed
   137                              <1>     ; for debugging purposes.
   138                              <1>     ;
   139 00000067 B8BFBFBFBF          <1>     mov     eax, 0xBFBFBFBF
   140 0000006C 89C5                <1>     mov     ebp, eax
   141 0000006E EBFE                <1>     jmp     $
   142                              <1> 
   143                              <1> searchedForBfvHeaderAndItWasFound:
   144 00000070 89C5                <1>     mov     ebp, eax
   145                              <1> 
   146                              <1>     debugShowPostCode POSTCODE_BFV_FOUND
   147                              <1> 
   148                              <1>     OneTimeCallRet Flat32SearchForBfvBase
    54 00000072 E957080000          <2>  jmp %1 %+ OneTimerCallReturn
   149                              <1> 
    48                                  %include "Ia32/SearchForSecEntry.asm"
    49                              <1> ;------------------------------------------------------------------------------
    50                              <1> ; @file
    51                              <1> ; Search for the SEC Core entry point
    52                              <1> ;
    53                              <1> ; Copyright (c) 2008 - 2011, Intel Corporation. All rights reserved.<BR>
    54                              <1> ; SPDX-License-Identifier: BSD-2-Clause-Patent
    55                              <1> ;
    56                              <1> ;------------------------------------------------------------------------------
    57                              <1> 
    58                              <1> BITS    32
    59                              <1> 
    60                              <1> %define EFI_FV_FILETYPE_SECURITY_CORE         0x03
    61                              <1> 
    62                              <1> ;
    63                              <1> ; Modified:  EAX, EBX, ECX, EDX
    64                              <1> ; Preserved: EDI, EBP, ESP
    65                              <1> ;
    66                              <1> ; @param[in]   EBP  Address of Boot Firmware Volume (BFV)
    67                              <1> ; @param[out]  ESI  SEC Core Entry Point Address
    68                              <1> ;
    69                              <1> Flat32SearchForSecEntryPoint:
    70                              <1> 
    71                              <1>     ;
    72                              <1>     ; Initialize EBP and ESI to 0
    73                              <1>     ;
    74 00000077 31DB                <1>     xor     ebx, ebx
    75 00000079 89DE                <1>     mov     esi, ebx
    76                              <1> 
    77                              <1>     ;
    78                              <1>     ; Pass over the BFV header
    79                              <1>     ;
    80 0000007B 89E8                <1>     mov     eax, ebp
    81 0000007D 668B5D30            <1>     mov     bx, [ebp + 0x30]
    82 00000081 01D8                <1>     add     eax, ebx
    83 00000083 723B                <1>     jc      secEntryPointWasNotFound
    84                              <1> 
    85 00000085 EB03                <1>     jmp     searchingForFfsFileHeaderLoop
    86                              <1> 
    87                              <1> moveForwardWhileSearchingForFfsFileHeaderLoop:
    88                              <1>     ;
    89                              <1>     ; Make forward progress in the search
    90                              <1>     ;
    91 00000087 40                  <1>     inc     eax
    92 00000088 7236                <1>     jc      secEntryPointWasNotFound
    93                              <1> 
    94                              <1> searchingForFfsFileHeaderLoop:
    95 0000008A 85C0                <1>     test    eax, eax
    96 0000008C 7432                <1>     jz      secEntryPointWasNotFound
    97                              <1> 
    98                              <1>     ;
    99                              <1>     ; Ensure 8 byte alignment
   100                              <1>     ;
   101 0000008E 83C007              <1>     add     eax, 7
   102 00000091 722D                <1>     jc      secEntryPointWasNotFound
   103 00000093 24F8                <1>     and     al, 0xf8
   104                              <1> 
   105                              <1>     ;
   106                              <1>     ; Look to see if there is an FFS file at eax
   107                              <1>     ;
   108 00000095 8A5817              <1>     mov     bl, [eax + 0x17]
   109 00000098 F6C320              <1>     test    bl, 0x20
   110 0000009B 74EA                <1>     jz      moveForwardWhileSearchingForFfsFileHeaderLoop
   111 0000009D 8B4814              <1>     mov     ecx, [eax + 0x14]
   112 000000A0 81E1FFFFFF00        <1>     and     ecx, 0x00ffffff
   113 000000A6 09C9                <1>     or      ecx, ecx
   114 000000A8 74DD                <1>     jz      moveForwardWhileSearchingForFfsFileHeaderLoop
   115 000000AA 01C1                <1>     add     ecx, eax
   116 000000AC 7402                <1>     jz      jumpSinceWeFoundTheLastFfsFile
   117 000000AE 72D7                <1>     jc      moveForwardWhileSearchingForFfsFileHeaderLoop
   118                              <1> jumpSinceWeFoundTheLastFfsFile:
   119                              <1> 
   120                              <1>     ;
   121                              <1>     ; There seems to be a valid file at eax
   122                              <1>     ;
   123 000000B0 80781203            <1>     cmp     byte [eax + 0x12], EFI_FV_FILETYPE_SECURITY_CORE ; Check File Type
   124 000000B4 7506                <1>     jne     readyToTryFfsFileAtEcx
   125                              <1> 
   126                              <1> fileTypeIsSecCore:
   127                              <1>     OneTimeCall GetEntryPointOfFfsFile
    49 000000B6 EB17                <2>  jmp %1
    50                              <2> %1 %+ OneTimerCallReturn:
   128 000000B8 85C0                <1>     test    eax, eax
   129 000000BA 7506                <1>     jnz     doneSeachingForSecEntryPoint
   130                              <1> 
   131                              <1> readyToTryFfsFileAtEcx:
   132                              <1>     ;
   133                              <1>     ; Try the next FFS file at ECX
   134                              <1>     ;
   135 000000BC 89C8                <1>     mov     eax, ecx
   136 000000BE EBCA                <1>     jmp     searchingForFfsFileHeaderLoop
   137                              <1> 
   138                              <1> secEntryPointWasNotFound:
   139 000000C0 31C0                <1>     xor     eax, eax
   140                              <1> 
   141                              <1> doneSeachingForSecEntryPoint:
   142 000000C2 89C6                <1>     mov     esi, eax
   143                              <1> 
   144 000000C4 85F6                <1>     test    esi, esi
   145 000000C6 7502                <1>     jnz     secCoreEntryPointWasFound
   146                              <1> 
   147                              <1> secCoreEntryPointWasNotFound:
   148                              <1>     ;
   149                              <1>     ; Hang if the SEC entry point was not found
   150                              <1>     ;
   151                              <1>     debugShowPostCode POSTCODE_SEC_NOT_FOUND
   152 000000C8 74FE                <1>     jz      $
   153                              <1> 
   154                              <1> secCoreEntryPointWasFound:
   155                              <1>     debugShowPostCode POSTCODE_SEC_FOUND
   156                              <1> 
   157                              <1>     OneTimeCallRet Flat32SearchForSecEntryPoint
    54 000000CA E904080000          <2>  jmp %1 %+ OneTimerCallReturn
   158                              <1> 
   159                              <1> %define EFI_SECTION_PE32                  0x10
   160                              <1> %define EFI_SECTION_TE                    0x12
   161                              <1> 
   162                              <1> ;
   163                              <1> ; Input:
   164                              <1> ;   EAX - Start of FFS file
   165                              <1> ;   ECX - End of FFS file
   166                              <1> ;
   167                              <1> ; Output:
   168                              <1> ;   EAX - Entry point of PE32 (or 0 if not found)
   169                              <1> ;
   170                              <1> ; Modified:
   171                              <1> ;   EBX
   172                              <1> ;
   173                              <1> GetEntryPointOfFfsFile:
   174 000000CF 85C0                <1>     test    eax, eax
   175 000000D1 745F                <1>     jz      getEntryPointOfFfsFileErrorReturn
   176 000000D3 83C018              <1>     add     eax, 0x18       ; EAX = Start of section
   177                              <1> 
   178                              <1> getEntryPointOfFfsFileLoopForSections:
   179 000000D6 39C8                <1>     cmp     eax, ecx
   180 000000D8 7358                <1>     jae     getEntryPointOfFfsFileErrorReturn
   181                              <1> 
   182 000000DA 80780310            <1>     cmp     byte [eax + 3], EFI_SECTION_PE32
   183 000000DE 741B                <1>     je      getEntryPointOfFfsFileFoundPe32Section
   184                              <1> 
   185 000000E0 80780312            <1>     cmp     byte [eax + 3], EFI_SECTION_TE
   186 000000E4 7432                <1>     je      getEntryPointOfFfsFileFoundTeSection
   187                              <1> 
   188                              <1>     ;
   189                              <1>     ; The section type was not PE32 or TE, so move to next section
   190                              <1>     ;
   191 000000E6 8B18                <1>     mov     ebx, dword [eax]
   192 000000E8 81E3FFFFFF00        <1>     and     ebx, 0x00ffffff
   193 000000EE 01D8                <1>     add     eax, ebx
   194 000000F0 7240                <1>     jc      getEntryPointOfFfsFileErrorReturn
   195                              <1> 
   196                              <1>     ;
   197                              <1>     ; Ensure that FFS section is 32-bit aligned
   198                              <1>     ;
   199 000000F2 83C003              <1>     add     eax, 3
   200 000000F5 723B                <1>     jc      getEntryPointOfFfsFileErrorReturn
   201 000000F7 24FC                <1>     and     al, 0xfc
   202 000000F9 EBDB                <1>     jmp     getEntryPointOfFfsFileLoopForSections
   203                              <1> 
   204                              <1> getEntryPointOfFfsFileFoundPe32Section:
   205 000000FB 83C004              <1>     add     eax, 4       ; EAX = Start of PE32 image
   206                              <1> 
   207 000000FE 6681384D5A          <1>     cmp     word [eax], 'MZ'
   208 00000103 752D                <1>     jne     getEntryPointOfFfsFileErrorReturn
   209 00000105 0FB7583C            <1>     movzx   ebx, word [eax + 0x3c]
   210 00000109 01C3                <1>     add     ebx, eax
   211                              <1> 
   212                              <1>     ; if (Hdr.Pe32->Signature == EFI_IMAGE_NT_SIGNATURE)
   213 0000010B 813B50450000        <1>     cmp     dword [ebx], `PE\x00\x00`
   214 00000111 751F                <1>     jne     getEntryPointOfFfsFileErrorReturn
   215                              <1> 
   216                              <1>     ; *EntryPoint = (VOID *)((UINTN)Pe32Data +
   217                              <1>     ;   (UINTN)(Hdr.Pe32->OptionalHeader.AddressOfEntryPoint & 0x0ffffffff));
   218 00000113 034328              <1>     add     eax, [ebx + 0x4 + 0x14 + 0x10]
   219 00000116 EB1F                <1>     jmp     getEntryPointOfFfsFileReturn
   220                              <1> 
   221                              <1> getEntryPointOfFfsFileFoundTeSection:
   222 00000118 83C004              <1>     add     eax, 4       ; EAX = Start of TE image
   223 0000011B 89C3                <1>     mov     ebx, eax
   224                              <1> 
   225                              <1>     ; if (Hdr.Te->Signature == EFI_TE_IMAGE_HEADER_SIGNATURE)
   226 0000011D 66813B565A          <1>     cmp     word [ebx], 'VZ'
   227 00000122 750E                <1>     jne     getEntryPointOfFfsFileErrorReturn
   228                              <1>     ; *EntryPoint = (VOID *)((UINTN)Pe32Data +
   229                              <1>     ;   (UINTN)(Hdr.Te->AddressOfEntryPoint & 0x0ffffffff) +
   230                              <1>     ;   sizeof(EFI_TE_IMAGE_HEADER) - Hdr.Te->StrippedSize);
   231 00000124 034308              <1>     add     eax, [ebx + 0x8]
   232 00000127 83C028              <1>     add     eax, 0x28
   233 0000012A 0FB75B06            <1>     movzx   ebx, word [ebx + 0x6]
   234 0000012E 29D8                <1>     sub     eax, ebx
   235 00000130 EB05                <1>     jmp     getEntryPointOfFfsFileReturn
   236                              <1> 
   237                              <1> getEntryPointOfFfsFileErrorReturn:
   238 00000132 B800000000          <1>     mov     eax, 0
   239                              <1> 
   240                              <1> getEntryPointOfFfsFileReturn:
   241                              <1>     OneTimeCallRet GetEntryPointOfFfsFile
    54 00000137 E97CFFFFFF          <2>  jmp %1 %+ OneTimerCallReturn
   242                              <1> 
    49                                  
    50                                  %define WORK_AREA_GUEST_TYPE (00080B000h)
    51                                  %define PT_ADDR(Offset) (000800000h + (Offset))
    52                                  
    53                                  %define GHCB_PT_ADDR (000808000h)
    54                                  %define GHCB_BASE (000809000h)
    55                                  %define GHCB_SIZE (000002000h)
    56                                  %define SEV_ES_WORK_AREA (8433668)
    57                                  %define SEV_ES_WORK_AREA_SIZE 25
    58                                  %define SEV_ES_WORK_AREA_STATUS_MSR (8433668)
    59                                  %define SEV_ES_WORK_AREA_RDRAND (8433668 + 8)
    60                                  %define SEV_ES_WORK_AREA_ENC_MASK (8433668 + 16)
    61                                  %define SEV_ES_WORK_AREA_RECEIVED_VC (8433668 + 24)
    62                                  %define SEV_ES_VC_TOP_OF_STACK (000810000h + 000010000h)
    63                                  %define SEV_SNP_SECRETS_BASE (00080D000h)
    64                                  %define SEV_SNP_SECRETS_SIZE (000001000h)
    65                                  %define CPUID_BASE (00080E000h)
    66                                  %define CPUID_SIZE (000001000h)
    67                                  %define SNP_SEC_MEM_BASE_DESC_1 (000800000h)
    68                                  %define SNP_SEC_MEM_SIZE_DESC_1 (000809000h - SNP_SEC_MEM_BASE_DESC_1)
    69                                  ;
    70                                  ; The PcdOvmfSecGhcbBase reserves two GHCB pages. The first page is used
    71                                  ; as GHCB shared page and second is used for bookkeeping to support the
    72                                  ; nested GHCB in SEC phase. The bookkeeping page is mapped private. The VMM
    73                                  ; does not need to validate the shared page but it need to validate the
    74                                  ; bookkeeping page.
    75                                  ;
    76                                  %define SNP_SEC_MEM_BASE_DESC_2 (GHCB_BASE + 01000h)
    77                                  %define SNP_SEC_MEM_SIZE_DESC_2 (SEV_SNP_SECRETS_BASE - SNP_SEC_MEM_BASE_DESC_2)
    78                                  %define SNP_SEC_MEM_BASE_DESC_3 (CPUID_BASE + CPUID_SIZE)
    79                                  %define SNP_SEC_MEM_SIZE_DESC_3 (000820000h - SNP_SEC_MEM_BASE_DESC_3)
    80                                  
    81                                  %ifdef ARCH_X64
    82                                  
    83                                  
    84                                    %if (000006000h != 06000h)
    85                                      %error "This implementation inherently depends on PcdOvmfSecPageTablesSize"
    86                                    %endif
    87                                  
    88                                    %if (000001000h != 01000h)
    89                                      %error "This implementation inherently depends on PcdOvmfSecGhcbPageTableSize"
    90                                    %endif
    91                                  
    92                                    %if (000002000h != 02000h)
    93                                      %error "This implementation inherently depends on PcdOvmfSecGhcbSize"
    94                                    %endif
    95                                  
    96                                    %if ((000809000h >> 21) != ((000809000h + 000002000h - 1) >> 21))
    97                                  
    98                                      %error "This implementation inherently depends on PcdOvmfSecGhcbBase not straddling a 2MB boundary"
    99                                    %endif
   100                                  
   101                                    %define TDX_BFV_RAW_DATA_OFFSET 084000h
   102                                    %define TDX_BFV_RAW_DATA_SIZE 00037C000h
   103                                    %define TDX_BFV_MEMORY_BASE 0FFC84000h
   104                                    %define TDX_BFV_MEMORY_SIZE 00037C000h
   105                                  
   106                                    %define TDX_CFV_RAW_DATA_OFFSET 0
   107                                    %define TDX_CFV_RAW_DATA_SIZE 084000h
   108                                    %define TDX_CFV_MEMORY_BASE 0FFC00000h,
   109                                    %define TDX_CFV_MEMORY_SIZE 084000h,
   110                                  
   111                                    %define TDX_HEAP_STACK_BASE 000810000h
   112                                    %define TDX_HEAP_STACK_SIZE 000010000h
   113                                  
   114                                    %define TDX_HOB_MEMORY_BASE 000809000h
   115                                    %define TDX_HOB_MEMORY_SIZE 000002000h
   116                                  
   117                                    %define TDX_INIT_MEMORY_BASE 00080B000h
   118                                    %define TDX_INIT_MEMORY_SIZE (000001000h + 000001000h)
   119                                  
   120                                    %define OVMF_PAGE_TABLE_BASE 000800000h
   121                                    %define OVMF_PAGE_TABLE_SIZE 000006000h
   122                                  
   123                                    %define TDX_WORK_AREA_PGTBL_READY (00080B000h + 4)
   124                                    %define TDX_WORK_AREA_GPAW (00080B000h + 8)
   125                                  
   126                                    %include "X64/IntelTdxMetadata.asm"
   127                              <1> ;------------------------------------------------------------------------------
   128                              <1> ; @file
   129                              <1> ; Tdx Virtual Firmware metadata
   130                              <1> ;
   131                              <1> ; When host VMM creates a new guest TD, some initial set of TD-private pages
   132                              <1> ; are added using the TDH.MEM.PAGE.ADD function. These pages typically contain
   133                              <1> ; Virtual BIOS code and data along with some clear pages for stacks and heap.
   134                              <1> ; In the meanwhile, some configuration data need be measured by host VMM.
   135                              <1> ; Tdx Metadata is designed for this purpose to indicate host VMM how to do the
   136                              <1> ; above tasks.
   137                              <1> ;
   138                              <1> ; Tdx Metadata consists of a DESCRIPTOR as the header followed by several
   139                              <1> ; SECTIONs. Host VMM sets up the memory for TDVF according to these sections.
   140                              <1> ;
   141                              <1> ; _Bfv is the example (Bfv refers to the Virtual BIOS code).
   142                              <1> ; - By DataOffset/RawDataSize host VMM knows about the position of the code
   143                              <1> ;   in the binary image.
   144                              <1> ; - MemoryAddress/MemoryDataSize indicates the guest physical address/size of
   145                              <1> ;   the Bfv to be loaded.
   146                              <1> ; - Type field means this section is of BFV. This field is designed for the
   147                              <1> ;   purpose that in some case host VMM may do some additional processing based
   148                              <1> ;   upon the section type. TdHob section is an example. Host VMM pass the
   149                              <1> ;   physical memory information to the guest firmware by writing the data in
   150                              <1> ;   the memory region designated by TdHob section.
   151                              <1> ; - By design code part of the binary image (Bfv) should be measured by host
   152                              <1> ;   VMM. This is indicated by the Attributes field.
   153                              <1> ;
   154                              <1> ; So put all these information together, when a new guest is being created,
   155                              <1> ; the initial TD-private pages for BFV is added by TDH.MEM.PAGE.ADD function,
   156                              <1> ; and Bfv is loaded at the guest physical address indicated by MemoryAddress.
   157                              <1> ; Since the Attributes is TDX_METADATA_ATTRIBUTES_EXTENDMR, Bfv is measured by
   158                              <1> ; host VMM.
   159                              <1> ;
   160                              <1> ; Copyright (c) 2021, Intel Corporation. All rights reserved.<BR>
   161                              <1> ; SPDX-License-Identifier: BSD-2-Clause-Patent
   162                              <1> ;
   163                              <1> ;------------------------------------------------------------------------------
   164                              <1> 
   165                              <1> BITS    64
   166                              <1> 
   167                              <1> %define TDX_METADATA_SECTION_TYPE_BFV       0
   168                              <1> %define TDX_METADATA_SECTION_TYPE_CFV       1
   169                              <1> %define TDX_METADATA_SECTION_TYPE_TD_HOB    2
   170                              <1> %define TDX_METADATA_SECTION_TYPE_TEMP_MEM  3
   171                              <1> %define TDX_METADATA_VERSION                1
   172                              <1> %define TDX_METADATA_ATTRIBUTES_EXTENDMR    0x00000001
   173                              <1> 
   174 0000013C 90<rep 4h>          <1> ALIGN   16
   175                              <1> TIMES (15 - ((TdxGuidedStructureEnd - TdxGuidedStructureStart + 15) % 16)) DB 0
   176                              <1> 
   177                              <1> TdxGuidedStructureStart:
   178                              <1> 
   179                              <1> ;
   180                              <1> ; TDVF meta data
   181                              <1> ;
   182                              <1> TdxMetadataGuid:
   183 00000140 F3F9EAE98E16D544    <1>   DB  0xf3, 0xf9, 0xea, 0xe9, 0x8e, 0x16, 0xd5, 0x44
   184 00000148 A8EB7F4D8738F6AE    <1>   DB  0xa8, 0xeb, 0x7f, 0x4d, 0x87, 0x38, 0xf6, 0xae
   185                              <1> 
   186                              <1> _Descriptor:
   187 00000150 54445646            <1>   DB 'T','D','V','F'                                  ; Signature
   188 00000154 D0000000            <1>   DD TdxGuidedStructureEnd - _Descriptor              ; Length
   189 00000158 01000000            <1>   DD TDX_METADATA_VERSION                             ; Version
   190 0000015C 06000000            <1>   DD (TdxGuidedStructureEnd - _Descriptor - 16)/32    ; Number of sections
   191                              <1> 
   192                              <1> _Bfv:
   193 00000160 00400800            <1>   DD TDX_BFV_RAW_DATA_OFFSET
   194 00000164 00C03700            <1>   DD TDX_BFV_RAW_DATA_SIZE
   195 00000168 0040C8FF00000000    <1>   DQ TDX_BFV_MEMORY_BASE
   196 00000170 00C0370000000000    <1>   DQ TDX_BFV_MEMORY_SIZE
   197 00000178 00000000            <1>   DD TDX_METADATA_SECTION_TYPE_BFV
   198 0000017C 01000000            <1>   DD TDX_METADATA_ATTRIBUTES_EXTENDMR
   199                              <1> 
   200                              <1> _Cfv:
   201 00000180 00000000            <1>   DD TDX_CFV_RAW_DATA_OFFSET
   202 00000184 00400800            <1>   DD TDX_CFV_RAW_DATA_SIZE
   203 00000188 0000C0FF00000000    <1>   DQ TDX_CFV_MEMORY_BASE
   204 00000190 0040080000000000    <1>   DQ TDX_CFV_MEMORY_SIZE
   205 00000198 01000000            <1>   DD TDX_METADATA_SECTION_TYPE_CFV
   206 0000019C 00000000            <1>   DD 0
   207                              <1> 
   208                              <1> _TdxHeapStack:
   209 000001A0 00000000            <1>   DD 0
   210 000001A4 00000000            <1>   DD 0
   211 000001A8 0000810000000000    <1>   DQ TDX_HEAP_STACK_BASE
   212 000001B0 0000010000000000    <1>   DQ TDX_HEAP_STACK_SIZE
   213 000001B8 03000000            <1>   DD TDX_METADATA_SECTION_TYPE_TEMP_MEM
   214 000001BC 00000000            <1>   DD 0
   215                              <1> 
   216                              <1> _TdxInitMem:
   217 000001C0 00000000            <1>   DD 0
   218 000001C4 00000000            <1>   DD 0
   219 000001C8 00B0800000000000    <1>   DQ TDX_INIT_MEMORY_BASE
   220 000001D0 0020000000000000    <1>   DQ TDX_INIT_MEMORY_SIZE
   221 000001D8 03000000            <1>   DD TDX_METADATA_SECTION_TYPE_TEMP_MEM
   222 000001DC 00000000            <1>   DD 0
   223                              <1> 
   224                              <1> _TdHob:
   225 000001E0 00000000            <1>   DD 0
   226 000001E4 00000000            <1>   DD 0
   227 000001E8 0090800000000000    <1>   DQ TDX_HOB_MEMORY_BASE
   228 000001F0 0020000000000000    <1>   DQ TDX_HOB_MEMORY_SIZE
   229 000001F8 02000000            <1>   DD TDX_METADATA_SECTION_TYPE_TD_HOB
   230 000001FC 00000000            <1>   DD 0
   231                              <1> 
   232                              <1> _OvmfPageTable:
   233 00000200 00000000            <1>   DD 0
   234 00000204 00000000            <1>   DD 0
   235 00000208 0000800000000000    <1>   DQ OVMF_PAGE_TABLE_BASE
   236 00000210 0060000000000000    <1>   DQ OVMF_PAGE_TABLE_SIZE
   237 00000218 03000000            <1>   DD TDX_METADATA_SECTION_TYPE_TEMP_MEM
   238 0000021C 00000000            <1>   DD 0
   239                              <1> 
   240                              <1> TdxGuidedStructureEnd:
   241                              <1> ALIGN   16
   127                                    %include "Ia32/Flat32ToFlat64.asm"
   128                              <1> ;------------------------------------------------------------------------------
   129                              <1> ; @file
   130                              <1> ; Transition from 32 bit flat protected mode into 64 bit flat protected mode
   131                              <1> ;
   132                              <1> ; Copyright (c) 2008 - 2018, Intel Corporation. All rights reserved.<BR>
   133                              <1> ; Copyright (c) 2020, Advanced Micro Devices, Inc. All rights reserved.<BR>
   134                              <1> ; SPDX-License-Identifier: BSD-2-Clause-Patent
   135                              <1> ;
   136                              <1> ;------------------------------------------------------------------------------
   137                              <1> 
   138                              <1> BITS    32
   139                              <1> 
   140                              <1> ;
   141                              <1> ; Modified:  EAX, ECX, EDX
   142                              <1> ;
   143                              <1> Transition32FlatTo64Flat:
   144                              <1> 
   145                              <1>     OneTimeCall SetCr3ForPageTables64
    49 00000220 E989000000          <2>  jmp %1
    50                              <2> %1 %+ OneTimerCallReturn:
   146                              <1> 
   147 00000225 0F20E0              <1>     mov     eax, cr4
   148 00000228 0FBAE805            <1>     bts     eax, 5                      ; enable PAE
   149 0000022C 0F22E0              <1>     mov     cr4, eax
   150                              <1> 
   151                              <1>     ;
   152                              <1>     ; In TDX LME has already been set. So we're done and jump to enable
   153                              <1>     ; paging directly if Tdx is enabled.
   154                              <1>     ; EBX is cleared because in the later it will be used to check if
   155                              <1>     ; the second step of the SEV-ES mitigation is to be performed.
   156                              <1>     ;
   157 0000022F 31DB                <1>     xor     ebx, ebx
   158                              <1>     OneTimeCall IsTdxEnabled
    49 00000231 E913020000          <2>  jmp %1
    50                              <2> %1 %+ OneTimerCallReturn:
   159 00000236 85C0                <1>     test    eax, eax
   160 00000238 7538                <1>     jnz     EnablePaging
   161                              <1> 
   162 0000023A B9800000C0          <1>     mov     ecx, 0xc0000080
   163 0000023F 0F32                <1>     rdmsr
   164 00000241 0FBAE808            <1>     bts     eax, 8                      ; set LME
   165 00000245 0F30                <1>     wrmsr
   166                              <1> 
   167                              <1>     ;
   168                              <1>     ; SEV-ES mitigation check support
   169                              <1>     ;
   170 00000247 31DB                <1>     xor     ebx, ebx
   171                              <1> 
   172 00000249 B901000000          <1>     mov     ecx, 1
   173 0000024E 0FA30D04B08000      <1>     bt      [SEV_ES_WORK_AREA_STATUS_MSR], ecx
   174 00000255 741B                <1>     jz      EnablePaging
   175                              <1> 
   176                              <1>     ;
   177                              <1>     ; SEV-ES is active, perform a quick sanity check against the reported
   178                              <1>     ; encryption bit position. This is to help mitigate against attacks where
   179                              <1>     ; the hypervisor reports an incorrect encryption bit position.
   180                              <1>     ;
   181                              <1>     ; This is the first step in a two step process. Before paging is enabled
   182                              <1>     ; writes to memory are encrypted. Using the RDRAND instruction (available
   183                              <1>     ; on all SEV capable processors), write 64-bits of random data to the
   184                              <1>     ; SEV_ES_WORK_AREA and maintain the random data in registers (register
   185                              <1>     ; state is protected under SEV-ES). This will be used in the second step.
   186                              <1>     ;
   187                              <1> RdRand1:
   188 00000257 0FC7F1              <1>     rdrand  ecx
   189 0000025A 73FB                <1>     jnc     RdRand1
   190 0000025C 890D0CB08000        <1>     mov     dword[SEV_ES_WORK_AREA_RDRAND], ecx
   191                              <1> RdRand2:
   192 00000262 0FC7F2              <1>     rdrand  edx
   193 00000265 73FB                <1>     jnc     RdRand2
   194 00000267 891510B08000        <1>     mov     dword[SEV_ES_WORK_AREA_RDRAND + 4], edx
   195                              <1> 
   196                              <1>     ;
   197                              <1>     ; Use EBX instead of the SEV_ES_WORK_AREA memory to determine whether to
   198                              <1>     ; perform the second step.
   199                              <1>     ;
   200 0000026D BB01000000          <1>     mov     ebx, 1
   201                              <1> 
   202                              <1> EnablePaging:
   203 00000272 0F20C0              <1>     mov     eax, cr0
   204 00000275 0FBAE81F            <1>     bts     eax, 31                     ; set PG
   205 00000279 0F22C0              <1>     mov     cr0, eax                    ; enable paging
   206                              <1> 
   207 0000027C EAE3F8FFFF1800      <1>     jmp     LINEAR_CODE64_SEL:ADDR_OF(jumpTo64BitAndLandHere)
   208                              <1> BITS    64
   209                              <1> jumpTo64BitAndLandHere:
   210                              <1> 
   211                              <1>     ;
   212                              <1>     ; Check if the second step of the SEV-ES mitigation is to be performed.
   213                              <1>     ;
   214 00000283 85DB                <1>     test    ebx, ebx
   215 00000285 7412                <1>     jz      InsnCompare
   216                              <1> 
   217                              <1>     ;
   218                              <1>     ; SEV-ES is active, perform the second step of the encryption bit postion
   219                              <1>     ; mitigation check. The ECX and EDX register contain data from RDRAND that
   220                              <1>     ; was stored to memory in encrypted form. If the encryption bit position is
   221                              <1>     ; valid, the contents of ECX and EDX will match the memory location.
   222                              <1>     ;
   223 00000287 390C250CB08000      <1>     cmp     dword[SEV_ES_WORK_AREA_RDRAND], ecx
   224 0000028E 7515                <1>     jne     SevEncBitHlt
   225 00000290 39142510B08000      <1>     cmp     dword[SEV_ES_WORK_AREA_RDRAND + 4], edx
   226 00000297 750C                <1>     jne     SevEncBitHlt
   227                              <1> 
   228                              <1>     ;
   229                              <1>     ; If SEV or SEV-ES is active, perform a quick sanity check against
   230                              <1>     ; the reported encryption bit position. This is to help mitigate
   231                              <1>     ; against attacks where the hypervisor reports an incorrect encryption
   232                              <1>     ; bit position. If SEV is not active, this check will always succeed.
   233                              <1>     ;
   234                              <1>     ; The cmp instruction compares the first four bytes of the cmp instruction
   235                              <1>     ; itself (which will be read decrypted if SEV or SEV-ES is active and the
   236                              <1>     ; encryption bit position is valid) against the immediate within the
   237                              <1>     ; instruction (an instruction fetch is always decrypted correctly by
   238                              <1>     ; hardware) based on RIP relative addressing.
   239                              <1>     ;
   240                              <1> InsnCompare:
   241 00000299 813DF6FFFFFF813DF6- <1>     cmp     dword[rel InsnCompare], 0xFFF63D81
   241 000002A2 FF                  <1>
   242 000002A3 7404                <1>     je      GoodCompare
   243                              <1> 
   244                              <1>     ;
   245                              <1>     ; The hypervisor provided an incorrect encryption bit position, do not
   246                              <1>     ; proceed.
   247                              <1>     ;
   248                              <1> SevEncBitHlt:
   249 000002A5 FA                  <1>     cli
   250 000002A6 F4                  <1>     hlt
   251 000002A7 EBFC                <1>     jmp     SevEncBitHlt
   252                              <1> 
   253                              <1> GoodCompare:
   254                              <1>     debugShowPostCode POSTCODE_64BIT_MODE
   255                              <1> 
   256                              <1>     OneTimeCallRet Transition32FlatTo64Flat
    54 000002A9 E92A060000          <2>  jmp %1 %+ OneTimerCallReturn
   257                              <1> 
   128                                    %include "Ia32/PageTables64.asm"
   129                              <1> ;------------------------------------------------------------------------------
   130                              <1> ; @file
   131                              <1> ; Sets the CR3 register for 64-bit paging
   132                              <1> ;
   133                              <1> ; Copyright (c) 2008 - 2013, Intel Corporation. All rights reserved.<BR>
   134                              <1> ; Copyright (c) 2017 - 2020, Advanced Micro Devices, Inc. All rights reserved.<BR>
   135                              <1> ; SPDX-License-Identifier: BSD-2-Clause-Patent
   136                              <1> ;
   137                              <1> ;------------------------------------------------------------------------------
   138                              <1> 
   139                              <1> BITS    32
   140                              <1> 
   141                              <1> %define PAGE_PRESENT            0x01
   142                              <1> %define PAGE_READ_WRITE         0x02
   143                              <1> %define PAGE_USER_SUPERVISOR    0x04
   144                              <1> %define PAGE_WRITE_THROUGH      0x08
   145                              <1> %define PAGE_CACHE_DISABLE     0x010
   146                              <1> %define PAGE_ACCESSED          0x020
   147                              <1> %define PAGE_DIRTY             0x040
   148                              <1> %define PAGE_PAT               0x080
   149                              <1> %define PAGE_GLOBAL           0x0100
   150                              <1> %define PAGE_2M_MBO            0x080
   151                              <1> %define PAGE_2M_PAT          0x01000
   152                              <1> 
   153                              <1> %define PAGE_4K_PDE_ATTR (PAGE_ACCESSED +                           PAGE_DIRTY +                           PAGE_READ_WRITE +                           PAGE_PRESENT)
   157                              <1> 
   158                              <1> %define PAGE_2M_PDE_ATTR (PAGE_2M_MBO +                           PAGE_ACCESSED +                           PAGE_DIRTY +                           PAGE_READ_WRITE +                           PAGE_PRESENT)
   163                              <1> 
   164                              <1> %define PAGE_PDP_ATTR (PAGE_ACCESSED +                        PAGE_READ_WRITE +                        PAGE_PRESENT)
   167                              <1> 
   168                              <1> %define TDX_BSP         1
   169                              <1> %define TDX_AP          2
   170                              <1> 
   171                              <1> ;
   172                              <1> ; Modified:  EAX, EBX, ECX, EDX
   173                              <1> ;
   174                              <1> SetCr3ForPageTables64:
   175                              <1>     ; Check the TDX features.
   176                              <1>     ; If it is TDX APs, then jump to SetCr3 directly.
   177                              <1>     ; In TD guest the initialization is done by BSP, including building
   178                              <1>     ; the page tables. APs will spin on until byte[TDX_WORK_AREA_PGTBL_READY]
   179                              <1>     ; is set.
   180                              <1>     OneTimeCall   CheckTdxFeaturesBeforeBuildPagetables
    49 000002AE E969010000          <2>  jmp %1
    50                              <2> %1 %+ OneTimerCallReturn:
   181 000002B3 83F801              <1>     cmp       eax, TDX_BSP
   182 000002B6 7413                <1>     je        ClearOvmfPageTables
   183 000002B8 83F802              <1>     cmp       eax, TDX_AP
   184 000002BB 0F8494000000        <1>     je        SetCr3
   185                              <1> 
   186                              <1>     ; Check whether the SEV is active and populate the SevEsWorkArea
   187                              <1>     OneTimeCall   CheckSevFeatures
    49 000002C1 E97D020000          <2>  jmp %1
    50                              <2> %1 %+ OneTimerCallReturn:
   188                              <1> 
   189                              <1>     ; If SEV is enabled, the C-bit position is always above 31.
   190                              <1>     ; The mask will be saved in the EDX and applied during the
   191                              <1>     ; the page table build below.
   192                              <1>     OneTimeCall   GetSevCBitMaskAbove31
    49 000002C6 E962020000          <2>  jmp %1
    50                              <2> %1 %+ OneTimerCallReturn:
   193                              <1> 
   194                              <1> ClearOvmfPageTables:
   195                              <1>     ;
   196                              <1>     ; For OVMF, build some initial page tables at
   197                              <1>     ; PcdOvmfSecPageTablesBase - (PcdOvmfSecPageTablesBase + 0x6000).
   198                              <1>     ;
   199                              <1>     ; This range should match with PcdOvmfSecPageTablesSize which is
   200                              <1>     ; declared in the FDF files.
   201                              <1>     ;
   202                              <1>     ; At the end of PEI, the pages tables will be rebuilt into a
   203                              <1>     ; more permanent location by DxeIpl.
   204                              <1>     ;
   205                              <1> 
   206 000002CB B900180000          <1>     mov     ecx, 6 * 0x1000 / 4
   207 000002D0 31C0                <1>     xor     eax, eax
   208                              <1> clearPageTablesMemoryLoop:
   209 000002D2 89048DFCFF7F00      <1>     mov     dword[ecx * 4 + PT_ADDR (0) - 4], eax
   210 000002D9 E2F7                <1>     loop    clearPageTablesMemoryLoop
   211                              <1> 
   212                              <1>     ;
   213                              <1>     ; Top level Page Directory Pointers (1 * 512GB entry)
   214                              <1>     ;
   215 000002DB C70500008000231080- <1>     mov     dword[PT_ADDR (0)], PT_ADDR (0x1000) + PAGE_PDP_ATTR
   215 000002E4 00                  <1>
   216 000002E5 891504008000        <1>     mov     dword[PT_ADDR (4)], edx
   217                              <1> 
   218                              <1>     ;
   219                              <1>     ; Next level Page Directory Pointers (4 * 1GB entries => 4GB)
   220                              <1>     ;
   221 000002EB C70500108000232080- <1>     mov     dword[PT_ADDR (0x1000)], PT_ADDR (0x2000) + PAGE_PDP_ATTR
   221 000002F4 00                  <1>
   222 000002F5 891504108000        <1>     mov     dword[PT_ADDR (0x1004)], edx
   223 000002FB C70508108000233080- <1>     mov     dword[PT_ADDR (0x1008)], PT_ADDR (0x3000) + PAGE_PDP_ATTR
   223 00000304 00                  <1>
   224 00000305 89150C108000        <1>     mov     dword[PT_ADDR (0x100C)], edx
   225 0000030B C70510108000234080- <1>     mov     dword[PT_ADDR (0x1010)], PT_ADDR (0x4000) + PAGE_PDP_ATTR
   225 00000314 00                  <1>
   226 00000315 891514108000        <1>     mov     dword[PT_ADDR (0x1014)], edx
   227 0000031B C70518108000235080- <1>     mov     dword[PT_ADDR (0x1018)], PT_ADDR (0x5000) + PAGE_PDP_ATTR
   227 00000324 00                  <1>
   228 00000325 89151C108000        <1>     mov     dword[PT_ADDR (0x101C)], edx
   229                              <1> 
   230                              <1>     ;
   231                              <1>     ; Page Table Entries (2048 * 2MB entries => 4GB)
   232                              <1>     ;
   233 0000032B B900080000          <1>     mov     ecx, 0x800
   234                              <1> pageTableEntriesLoop:
   235 00000330 89C8                <1>     mov     eax, ecx
   236 00000332 48                  <1>     dec     eax
   237 00000333 C1E015              <1>     shl     eax, 21
   238 00000336 05E3000000          <1>     add     eax, PAGE_2M_PDE_ATTR
   239 0000033B 8904CDF81F8000      <1>     mov     [ecx * 8 + PT_ADDR (0x2000 - 8)], eax
   240 00000342 8914CDFC1F8000      <1>     mov     [(ecx * 8 + PT_ADDR (0x2000 - 8)) + 4], edx
   241 00000349 E2E5                <1>     loop    pageTableEntriesLoop
   242                              <1> 
   243                              <1>     ; Clear the C-bit from the GHCB page if the SEV-ES is enabled.
   244                              <1>     OneTimeCall   SevClearPageEncMaskForGhcbPage
    49 0000034B E97D010000          <2>  jmp %1
    50                              <2> %1 %+ OneTimerCallReturn:
   245                              <1> 
   246                              <1>     ; TDX will do some PostBuildPages task, such as setting
   247                              <1>     ; byte[TDX_WORK_AREA_PGTBL_READY].
   248                              <1>     OneTimeCall   TdxPostBuildPageTables
    49 00000350 E9DF000000          <2>  jmp %1
    50                              <2> %1 %+ OneTimerCallReturn:
   249                              <1> 
   250                              <1> SetCr3:
   251                              <1>     ;
   252                              <1>     ; Set CR3 now that the paging structures are available
   253                              <1>     ;
   254 00000355 B800008000          <1>     mov     eax, PT_ADDR (0)
   255 0000035A 0F22D8              <1>     mov     cr3, eax
   256                              <1> 
   257                              <1>     OneTimeCallRet SetCr3ForPageTables64
    54 0000035D E9C3FEFFFF          <2>  jmp %1 %+ OneTimerCallReturn
   129                                    %include "Ia32/IntelTdx.asm"
   130                              <1> ;------------------------------------------------------------------------------
   131                              <1> ; @file
   132                              <1> ;   Intel TDX routines
   133                              <1> ;
   134                              <1> ; Copyright (c) 2021, Intel Corporation. All rights reserved.<BR>
   135                              <1> ; SPDX-License-Identifier: BSD-2-Clause-Patent
   136                              <1> ;
   137                              <1> ;------------------------------------------------------------------------------
   138                              <1> 
   139                              <1> %define VM_GUEST_TDX     2
   140                              <1> 
   141                              <1> BITS 32
   142                              <1> 
   143                              <1> ;
   144                              <1> ; Check if it is Intel Tdx
   145                              <1> ;
   146                              <1> ; Modified: EAX, EBX, ECX, EDX
   147                              <1> ;
   148                              <1> ; If it is Intel Tdx, EAX is 1
   149                              <1> ; If it is not Intel Tdx, EAX is 0
   150                              <1> ;
   151                              <1> IsTdx:
   152                              <1>     ;
   153                              <1>     ; CPUID (0)
   154                              <1>     ;
   155 00000362 B800000000          <1>     mov     eax, 0
   156 00000367 0FA2                <1>     cpuid
   157 00000369 81FB47656E75        <1>     cmp     ebx, 0x756e6547  ; "Genu"
   158 0000036F 7556                <1>     jne     IsNotTdx
   159 00000371 81FA696E6549        <1>     cmp     edx, 0x49656e69  ; "ineI"
   160 00000377 754E                <1>     jne     IsNotTdx
   161 00000379 81F96E74656C        <1>     cmp     ecx, 0x6c65746e  ; "ntel"
   162 0000037F 7546                <1>     jne     IsNotTdx
   163                              <1> 
   164                              <1>     ;
   165                              <1>     ; CPUID (1)
   166                              <1>     ;
   167 00000381 B801000000          <1>     mov     eax, 1
   168 00000386 0FA2                <1>     cpuid
   169 00000388 F7C100000080        <1>     test    ecx, 0x80000000
   170 0000038E 7437                <1>     jz      IsNotTdx
   171                              <1> 
   172                              <1>     ;
   173                              <1>     ; CPUID[0].EAX >= 0x21?
   174                              <1>     ;
   175 00000390 B800000000          <1>     mov     eax, 0
   176 00000395 0FA2                <1>     cpuid
   177 00000397 83F821              <1>     cmp     eax, 0x21
   178 0000039A 7C2B                <1>     jl      IsNotTdx
   179                              <1> 
   180                              <1>     ;
   181                              <1>     ; CPUID (0x21,0)
   182                              <1>     ;
   183 0000039C B821000000          <1>     mov     eax, 0x21
   184 000003A1 B900000000          <1>     mov     ecx, 0
   185 000003A6 0FA2                <1>     cpuid
   186                              <1> 
   187 000003A8 81FB496E7465        <1>     cmp     ebx, 0x65746E49   ; "Inte"
   188 000003AE 7517                <1>     jne     IsNotTdx
   189 000003B0 81FA6C544458        <1>     cmp     edx, 0x5844546C   ; "lTDX"
   190 000003B6 750F                <1>     jne     IsNotTdx
   191 000003B8 81F920202020        <1>     cmp     ecx, 0x20202020   ; "    "
   192 000003BE 7507                <1>     jne     IsNotTdx
   193                              <1> 
   194 000003C0 B801000000          <1>     mov     eax, 1
   195 000003C5 EB02                <1>     jmp     ExitIsTdx
   196                              <1> 
   197                              <1> IsNotTdx:
   198 000003C7 31C0                <1>     xor     eax, eax
   199                              <1> 
   200                              <1> ExitIsTdx:
   201                              <1> 
   202                              <1>   OneTimeCallRet IsTdx
    54 000003C9 EB02                <2>  jmp %1 %+ OneTimerCallReturn
   203                              <1> 
   204                              <1> ;
   205                              <1> ; Initialize work area if it is Tdx guest. Detailed definition is in
   206                              <1> ; OvmfPkg/Include/WorkArea.h.
   207                              <1> ; BSP and APs all go here. Only BSP initialize this work area.
   208                              <1> ;
   209                              <1> ; Param[in] EBX[5:0]    CPU Supported GPAW (48 or 52)
   210                              <1> ; Param[in] ESI[31:0]   vCPU ID (BSP is 0, others are AP)
   211                              <1> ;
   212                              <1> ; Modified:  EBX
   213                              <1> ;
   214                              <1> InitTdxWorkarea:
   215                              <1> 
   216                              <1>     ;
   217                              <1>     ; First check if it is Tdx
   218                              <1>     ;
   219                              <1>     OneTimeCall IsTdx
    49 000003CB EB95                <2>  jmp %1
    50                              <2> %1 %+ OneTimerCallReturn:
   220                              <1> 
   221 000003CD 85C0                <1>     test    eax, eax
   222 000003CF 7420                <1>     jz      ExitInitTdxWorkarea
   223                              <1> 
   224 000003D1 83FE00              <1>     cmp     esi, 0
   225 000003D4 740B                <1>     je      TdxBspEntry
   226                              <1> 
   227                              <1>     ;
   228                              <1>     ; In Td guest, BSP/AP shares the same entry point
   229                              <1>     ; BSP builds up the page table, while APs shouldn't do the same task.
   230                              <1>     ; Instead, APs just leverage the page table which is built by BSP.
   231                              <1>     ; APs will wait until the page table is ready.
   232                              <1>     ;
   233                              <1> TdxApWait:
   234 000003D6 803D04B0800000      <1>     cmp     byte[TDX_WORK_AREA_PGTBL_READY], 0
   235 000003DD 74F7                <1>     je      TdxApWait
   236 000003DF EB10                <1>     jmp     ExitInitTdxWorkarea
   237                              <1> 
   238                              <1> TdxBspEntry:
   239                              <1>     ;
   240                              <1>     ; Set Type of WORK_AREA_GUEST_TYPE so that the following code can use
   241                              <1>     ; these information.
   242                              <1>     ;
   243 000003E1 C60500B0800002      <1>     mov     byte[WORK_AREA_GUEST_TYPE], VM_GUEST_TDX
   244                              <1> 
   245                              <1>     ;
   246                              <1>     ; EBX[5:0] CPU supported GPA width
   247                              <1>     ;
   248 000003E8 83E33F              <1>     and     ebx, 0x3f
   249 000003EB 891D08B08000        <1>     mov     DWORD[TDX_WORK_AREA_GPAW], ebx
   250                              <1> 
   251                              <1> ExitInitTdxWorkarea:
   252                              <1>     OneTimeCallRet InitTdxWorkarea
    54 000003F1 EB24                <2>  jmp %1 %+ OneTimerCallReturn
   253                              <1> 
   254                              <1> ;
   255                              <1> ; Load the GDT and set the CS/DS/ES/FS/GS/SS.
   256                              <1> ;
   257                              <1> ; Modified:  EAX, DS, ES, FS, GS, SS, CS
   258                              <1> ;
   259                              <1> ReloadFlat32:
   260                              <1> 
   261 000003F3 FA                  <1>     cli
   262 000003F4 B8D8FEFFFF          <1>     mov     eax, ADDR_OF(gdtr)
   263 000003F9 0F0110              <1>     lgdt    [eax]
   264                              <1> 
   265 000003FC EA63FAFFFF1000      <1>     jmp     LINEAR_CODE_SEL:dword ADDR_OF(jumpToFlat32BitAndLandHere)
   266                              <1> 
   267                              <1> jumpToFlat32BitAndLandHere:
   268                              <1> 
   269                              <1>     debugShowPostCode POSTCODE_32BIT_MODE
   270                              <1> 
   271 00000403 66B80800            <1>     mov     ax, LINEAR_SEL
   272 00000407 8ED8                <1>     mov     ds, ax
   273 00000409 8EC0                <1>     mov     es, ax
   274 0000040B 8EE0                <1>     mov     fs, ax
   275 0000040D 8EE8                <1>     mov     gs, ax
   276 0000040F 8ED0                <1>     mov     ss, ax
   277                              <1> 
   278                              <1>     OneTimeCallRet ReloadFlat32
    54 00000411 EB02                <2>  jmp %1 %+ OneTimerCallReturn
   279                              <1> 
   280                              <1> ;
   281                              <1> ; Tdx initialization after entering into ResetVector
   282                              <1> ;
   283                              <1> ; Modified:  EAX, EBX, ECX, EDX, EBP, EDI, ESP
   284                              <1> ;
   285                              <1> InitTdx:
   286                              <1>     ;
   287                              <1>     ; First load the GDT and jump to Flat32 mode
   288                              <1>     ;
   289                              <1>     OneTimeCall ReloadFlat32
    49 00000413 EBDE                <2>  jmp %1
    50                              <2> %1 %+ OneTimerCallReturn:
   290                              <1> 
   291                              <1>     ;
   292                              <1>     ; Initialization of Tdx work area
   293                              <1>     ;
   294                              <1>     OneTimeCall  InitTdxWorkarea
    49 00000415 EBB4                <2>  jmp %1
    50                              <2> %1 %+ OneTimerCallReturn:
   295                              <1> 
   296                              <1>     OneTimeCallRet InitTdx
    54 00000417 E9AD040000          <2>  jmp %1 %+ OneTimerCallReturn
   297                              <1> 
   298                              <1> ;
   299                              <1> ; Check TDX features, TDX or TDX-BSP or TDX-APs?
   300                              <1> ;
   301                              <1> ; By design TDX BSP is reponsible for initializing the PageTables.
   302                              <1> ; After PageTables are ready, byte[TDX_WORK_AREA_PGTBL_READY] is set to 1.
   303                              <1> ; APs will spin when byte[TDX_WORK_AREA_PGTBL_READY] is 0 until it is set to 1.
   304                              <1> ;
   305                              <1> ; When this routine is run on TDX BSP, byte[TDX_WORK_AREA_PGTBL_READY] should be 0.
   306                              <1> ; When this routine is run on TDX APs, byte[TDX_WORK_AREA_PGTBL_READY] should be 1.
   307                              <1> ;
   308                              <1> ;
   309                              <1> ; Modified:  EAX, EDX
   310                              <1> ;
   311                              <1> ; 0-NonTdx, 1-TdxBsp, 2-TdxAps
   312                              <1> ;
   313                              <1> CheckTdxFeaturesBeforeBuildPagetables:
   314 0000041C 31C0                <1>     xor     eax, eax
   315 0000041E 803D00B0800002      <1>     cmp     byte[WORK_AREA_GUEST_TYPE], VM_GUEST_TDX
   316 00000425 7508                <1>     jne     NotTdx
   317                              <1> 
   318 00000427 31D2                <1>     xor     edx, edx
   319 00000429 A004B08000          <1>     mov     al, byte[TDX_WORK_AREA_PGTBL_READY]
   320 0000042E 40                  <1>     inc     eax
   321                              <1> 
   322                              <1> NotTdx:
   323                              <1>     OneTimeCallRet CheckTdxFeaturesBeforeBuildPagetables
    54 0000042F E97FFEFFFF          <2>  jmp %1 %+ OneTimerCallReturn
   324                              <1> 
   325                              <1> ;
   326                              <1> ; Set byte[TDX_WORK_AREA_PGTBL_READY] to 1
   327                              <1> ;
   328                              <1> TdxPostBuildPageTables:
   329 00000434 803D00B0800002      <1>     cmp     byte[WORK_AREA_GUEST_TYPE], VM_GUEST_TDX
   330 0000043B 7507                <1>     jne     ExitTdxPostBuildPageTables
   331 0000043D C60504B0800001      <1>     mov     byte[TDX_WORK_AREA_PGTBL_READY], 1
   332                              <1> 
   333                              <1> ExitTdxPostBuildPageTables:
   334                              <1>     OneTimeCallRet TdxPostBuildPageTables
    54 00000444 E90CFFFFFF          <2>  jmp %1 %+ OneTimerCallReturn
   335                              <1> 
   336                              <1> ;
   337                              <1> ; Check if TDX is enabled
   338                              <1> ;
   339                              <1> ; Modified:  EAX
   340                              <1> ;
   341                              <1> ; If TDX is enabled then EAX will be 1
   342                              <1> ; If TDX is disabled then EAX will be 0.
   343                              <1> ;
   344                              <1> IsTdxEnabled:
   345 00000449 31C0                <1>     xor     eax, eax
   346 0000044B 803D00B0800002      <1>     cmp     byte[WORK_AREA_GUEST_TYPE], VM_GUEST_TDX
   347 00000452 7505                <1>     jne     TdxNotEnabled
   348 00000454 B801000000          <1>     mov     eax, 1
   349                              <1> 
   350                              <1> TdxNotEnabled:
   351                              <1>     OneTimeCallRet IsTdxEnabled
    54 00000459 E9D8FDFFFF          <2>  jmp %1 %+ OneTimerCallReturn
   130                                    %include "X64/OvmfSevMetadata.asm"
   131                              <1> ;-----------------------------------------------------------------------------
   132                              <1> ; @file
   133                              <1> ; OVMF metadata for the AMD SEV confidential computing guests
   134                              <1> ;
   135                              <1> ; Copyright (c) 2021, AMD Inc. All rights reserved.<BR>
   136                              <1> ;
   137                              <1> ; SPDX-License-Identifier: BSD-2-Clause-Patent
   138                              <1> ;-----------------------------------------------------------------------------
   139                              <1> 
   140                              <1> BITS  64
   141                              <1> 
   142                              <1> %define OVMF_SEV_METADATA_VERSION     1
   143                              <1> 
   144                              <1> ; The section must be accepted or validated by the VMM before the boot
   145                              <1> %define OVMF_SECTION_TYPE_SNP_SEC_MEM     0x1
   146                              <1> 
   147                              <1> ; AMD SEV-SNP specific sections
   148                              <1> %define OVMF_SECTION_TYPE_SNP_SECRETS     0x2
   149                              <1> 
   150                              <1> ;
   151                              <1> ; The section contains the hypervisor pre-populated CPUID values.
   152                              <1> ; In the case of SEV-SNP, the CPUID values are filtered and measured by
   153                              <1> ; the SEV-SNP firmware.
   154                              <1> ; The CPUID format is documented in SEV-SNP firmware spec 0.9 section 7.1
   155                              <1> ; (CPUID function structure).
   156                              <1> ;
   157                              <1> %define OVMF_SECTION_TYPE_CPUID           0x3
   158                              <1> 
   159                              <1> 
   160 0000045E 90<rep 2h>          <1> ALIGN 16
   161                              <1> 
   162 00000460 00<rep 4h>          <1> TIMES (15 - ((OvmfSevGuidedStructureEnd - OvmfSevGuidedStructureStart + 15) % 16)) DB 0
   163                              <1> 
   164                              <1> OvmfSevGuidedStructureStart:
   165                              <1> ;
   166                              <1> ; OvmfSev metadata descriptor
   167                              <1> ;
   168                              <1> OvmfSevMetadataGuid:
   169                              <1> 
   170                              <1> _DescriptorSev:
   171 00000464 41534556            <1>   DB 'A','S','E','V'                                        ; Signature
   172 00000468 4C000000            <1>   DD OvmfSevGuidedStructureEnd - _DescriptorSev             ; Length
   173 0000046C 01000000            <1>   DD OVMF_SEV_METADATA_VERSION                              ; Version
   174 00000470 05000000            <1>   DD (OvmfSevGuidedStructureEnd - _DescriptorSev - 16) / 12 ; Number of sections
   175                              <1> 
   176                              <1> ; Region need to be pre-validated by the hypervisor
   177                              <1> PreValidate1:
   178 00000474 00008000            <1>   DD  SNP_SEC_MEM_BASE_DESC_1
   179 00000478 00900000            <1>   DD  SNP_SEC_MEM_SIZE_DESC_1
   180 0000047C 01000000            <1>   DD  OVMF_SECTION_TYPE_SNP_SEC_MEM
   181                              <1> PreValidate2:
   182 00000480 00A08000            <1>   DD  SNP_SEC_MEM_BASE_DESC_2
   183 00000484 00300000            <1>   DD  SNP_SEC_MEM_SIZE_DESC_2
   184 00000488 01000000            <1>   DD  OVMF_SECTION_TYPE_SNP_SEC_MEM
   185                              <1> 
   186                              <1> ; SEV-SNP Secrets page
   187                              <1> SevSnpSecrets:
   188 0000048C 00D08000            <1>   DD  SEV_SNP_SECRETS_BASE
   189 00000490 00100000            <1>   DD  SEV_SNP_SECRETS_SIZE
   190 00000494 02000000            <1>   DD  OVMF_SECTION_TYPE_SNP_SECRETS
   191                              <1> 
   192                              <1> ; CPUID values
   193                              <1> CpuidSec:
   194 00000498 00E08000            <1>   DD  CPUID_BASE
   195 0000049C 00100000            <1>   DD  CPUID_SIZE
   196 000004A0 03000000            <1>   DD  OVMF_SECTION_TYPE_CPUID
   197                              <1> 
   198                              <1> ; Region need to be pre-validated by the hypervisor
   199                              <1> PreValidate3:
   200 000004A4 00F08000            <1>   DD  SNP_SEC_MEM_BASE_DESC_3
   201 000004A8 00100100            <1>   DD  SNP_SEC_MEM_SIZE_DESC_3
   202 000004AC 01000000            <1>   DD  OVMF_SECTION_TYPE_SNP_SEC_MEM
   203                              <1> OvmfSevGuidedStructureEnd:
   204                              <1>   ALIGN   16
   131                                  %endif
   132                                  
   133                                  %include "Ia32/AmdSev.asm"
   134                              <1> ;------------------------------------------------------------------------------
   135                              <1> ; @file
   136                              <1> ; Provide the functions to check whether SEV and SEV-ES is enabled.
   137                              <1> ;
   138                              <1> ; Copyright (c) 2017 - 2021, Advanced Micro Devices, Inc. All rights reserved.<BR>
   139                              <1> ; SPDX-License-Identifier: BSD-2-Clause-Patent
   140                              <1> ;
   141                              <1> ;------------------------------------------------------------------------------
   142                              <1> 
   143                              <1> BITS    32
   144                              <1> 
   145                              <1> ;
   146                              <1> ; SEV-ES #VC exception handler support
   147                              <1> ;
   148                              <1> ; #VC handler local variable locations
   149                              <1> ;
   150                              <1> %define VC_CPUID_RESULT_EAX         0
   151                              <1> %define VC_CPUID_RESULT_EBX         4
   152                              <1> %define VC_CPUID_RESULT_ECX         8
   153                              <1> %define VC_CPUID_RESULT_EDX        12
   154                              <1> %define VC_GHCB_MSR_EDX            16
   155                              <1> %define VC_GHCB_MSR_EAX            20
   156                              <1> %define VC_CPUID_REQUEST_REGISTER  24
   157                              <1> %define VC_CPUID_FUNCTION          28
   158                              <1> 
   159                              <1> ; #VC handler total local variable size
   160                              <1> ;
   161                              <1> %define VC_VARIABLE_SIZE           32
   162                              <1> 
   163                              <1> ; #VC handler GHCB CPUID request/response protocol values
   164                              <1> ;
   165                              <1> %define GHCB_CPUID_REQUEST          4
   166                              <1> %define GHCB_CPUID_RESPONSE         5
   167                              <1> %define GHCB_CPUID_REGISTER_SHIFT  30
   168                              <1> %define CPUID_INSN_LEN              2
   169                              <1> 
   170                              <1> ; #VC handler offsets/sizes for accessing SNP CPUID page
   171                              <1> ;
   172                              <1> %define SNP_CPUID_ENTRY_SZ         48
   173                              <1> %define SNP_CPUID_COUNT             0
   174                              <1> %define SNP_CPUID_ENTRY            16
   175                              <1> %define SNP_CPUID_ENTRY_EAX_IN      0
   176                              <1> %define SNP_CPUID_ENTRY_ECX_IN      4
   177                              <1> %define SNP_CPUID_ENTRY_EAX        24
   178                              <1> %define SNP_CPUID_ENTRY_EBX        28
   179                              <1> %define SNP_CPUID_ENTRY_ECX        32
   180                              <1> %define SNP_CPUID_ENTRY_EDX        36
   181                              <1> 
   182                              <1> 
   183                              <1> %define SEV_GHCB_MSR                0xc0010130
   184                              <1> %define SEV_STATUS_MSR              0xc0010131
   185                              <1> 
   186                              <1> ; The #VC was not for CPUID
   187                              <1> %define TERM_VC_NOT_CPUID           1
   188                              <1> 
   189                              <1> ; The unexpected response code
   190                              <1> %define TERM_UNEXPECTED_RESP_CODE   2
   191                              <1> 
   192                              <1> %define PAGE_PRESENT            0x01
   193                              <1> %define PAGE_READ_WRITE         0x02
   194                              <1> %define PAGE_USER_SUPERVISOR    0x04
   195                              <1> %define PAGE_WRITE_THROUGH      0x08
   196                              <1> %define PAGE_CACHE_DISABLE     0x010
   197                              <1> %define PAGE_ACCESSED          0x020
   198                              <1> %define PAGE_DIRTY             0x040
   199                              <1> %define PAGE_PAT               0x080
   200                              <1> %define PAGE_GLOBAL           0x0100
   201                              <1> %define PAGE_2M_MBO            0x080
   202                              <1> %define PAGE_2M_PAT          0x01000
   203                              <1> 
   204                              <1> %define PAGE_4K_PDE_ATTR (PAGE_ACCESSED +                           PAGE_DIRTY +                           PAGE_READ_WRITE +                           PAGE_PRESENT)
   208                              <1> 
   209                              <1> %define PAGE_PDP_ATTR (PAGE_ACCESSED +                        PAGE_READ_WRITE +                        PAGE_PRESENT)
   212                              <1> 
   213                              <1> 
   214                              <1> ; Macro is used to issue the MSR protocol based VMGEXIT. The caller is
   215                              <1> ; responsible to populate values in the EDX:EAX registers. After the vmmcall
   216                              <1> ; returns, it verifies that the response code matches with the expected
   217                              <1> ; code. If it does not match then terminate the guest. The result of request
   218                              <1> ; is returned in the EDX:EAX.
   219                              <1> ;
   220                              <1> ; args 1:Request code, 2: Response code
   221                              <1> %macro VmgExit 2
   222                              <1>     ;
   223                              <1>     ; Add request code:
   224                              <1>     ;   GHCB_MSR[11:0]  = Request code
   225                              <1>     or      eax, %1
   226                              <1> 
   227                              <1>     mov     ecx, SEV_GHCB_MSR
   228                              <1>     wrmsr
   229                              <1> 
   230                              <1>     ; Issue VMGEXIT - NASM doesn't support the vmmcall instruction in 32-bit
   231                              <1>     ; mode, so work around this by temporarily switching to 64-bit mode.
   232                              <1>     ;
   233                              <1> BITS    64
   234                              <1>     rep     vmmcall
   235                              <1> BITS    32
   236                              <1> 
   237                              <1>     mov     ecx, SEV_GHCB_MSR
   238                              <1>     rdmsr
   239                              <1> 
   240                              <1>     ;
   241                              <1>     ; Verify the reponse code, if it does not match then request to terminate
   242                              <1>     ;   GHCB_MSR[11:0]  = Response code
   243                              <1>     mov     ecx, eax
   244                              <1>     and     ecx, 0xfff
   245                              <1>     cmp     ecx, %2
   246                              <1>     jne     SevEsUnexpectedRespTerminate
   247                              <1> %endmacro
   248                              <1> 
   249                              <1> ; Macro to terminate the guest using the VMGEXIT.
   250                              <1> ; arg 1: reason code
   251                              <1> %macro TerminateVmgExit 1
   252                              <1>     mov     eax, %1
   253                              <1>     ;
   254                              <1>     ; Use VMGEXIT to request termination. At this point the reason code is
   255                              <1>     ; located in EAX, so shift it left 16 bits to the proper location.
   256                              <1>     ;
   257                              <1>     ; EAX[11:0]  => 0x100 - request termination
   258                              <1>     ; EAX[15:12] => 0x1   - OVMF
   259                              <1>     ; EAX[23:16] => 0xXX  - REASON CODE
   260                              <1>     ;
   261                              <1>     shl     eax, 16
   262                              <1>     or      eax, 0x1100
   263                              <1>     xor     edx, edx
   264                              <1>     mov     ecx, SEV_GHCB_MSR
   265                              <1>     wrmsr
   266                              <1>     ;
   267                              <1>     ; Issue VMGEXIT - NASM doesn't support the vmmcall instruction in 32-bit
   268                              <1>     ; mode, so work around this by temporarily switching to 64-bit mode.
   269                              <1>     ;
   270                              <1> BITS    64
   271                              <1>     rep     vmmcall
   272                              <1> BITS    32
   273                              <1> 
   274                              <1>     ;
   275                              <1>     ; We shouldn't come back from the VMGEXIT, but if we do, just loop.
   276                              <1>     ;
   277                              <1> %%TerminateHlt:
   278                              <1>     hlt
   279                              <1>     jmp     %%TerminateHlt
   280                              <1> %endmacro
   281                              <1> 
   282                              <1> ; Terminate the guest due to unexpected response code.
   283                              <1> SevEsUnexpectedRespTerminate:
   284                              <1>     TerminateVmgExit    TERM_UNEXPECTED_RESP_CODE
   252 000004B0 B802000000          <2>  mov eax, %1
   253                              <2> 
   254                              <2> 
   255                              <2> 
   256                              <2> 
   257                              <2> 
   258                              <2> 
   259                              <2> 
   260                              <2> 
   261 000004B5 C1E010              <2>  shl eax, 16
   262 000004B8 0D00110000          <2>  or eax, 0x1100
   263 000004BD 31D2                <2>  xor edx, edx
   264 000004BF B9300101C0          <2>  mov ecx, SEV_GHCB_MSR
   265 000004C4 0F30                <2>  wrmsr
   266                              <2> 
   267                              <2> 
   268                              <2> 
   269                              <2> 
   270                              <2> BITS 64
   271 000004C6 F30F01D9            <2>  rep vmmcall
   272                              <2> BITS 32
   273                              <2> 
   274                              <2> 
   275                              <2> 
   276                              <2> 
   277                              <2> %%TerminateHlt:
   278 000004CA F4                  <2>  hlt
   279 000004CB EBFD                <2>  jmp %%TerminateHlt
   285                              <1> 
   286                              <1> %ifdef ARCH_X64
   287                              <1> 
   288                              <1> ; If SEV-ES is enabled then initialize and make the GHCB page shared
   289                              <1> SevClearPageEncMaskForGhcbPage:
   290                              <1>     ; Check if SEV is enabled
   291 000004CD 803D00B0800001      <1>     cmp       byte[WORK_AREA_GUEST_TYPE], 1
   292 000004D4 7552                <1>     jnz       SevClearPageEncMaskForGhcbPageExit
   293                              <1> 
   294                              <1>     ; Check if SEV-ES is enabled
   295 000004D6 B901000000          <1>     mov       ecx, 1
   296 000004DB 0FA30D04B08000      <1>     bt        [SEV_ES_WORK_AREA_STATUS_MSR], ecx
   297 000004E2 7344                <1>     jnc       SevClearPageEncMaskForGhcbPageExit
   298                              <1> 
   299                              <1>     ;
   300                              <1>     ; The initial GHCB will live at GHCB_BASE and needs to be un-encrypted.
   301                              <1>     ; This requires the 2MB page for this range be broken down into 512 4KB
   302                              <1>     ; pages.  All will be marked encrypted, except for the GHCB.
   303                              <1>     ;
   304 000004E4 B904000000          <1>     mov     ecx, (GHCB_BASE >> 21)
   305 000004E9 B823808000          <1>     mov     eax, GHCB_PT_ADDR + PAGE_PDP_ATTR
   306 000004EE 8904CD00208000      <1>     mov     [ecx * 8 + PT_ADDR (0x2000)], eax
   307                              <1> 
   308                              <1>     ;
   309                              <1>     ; Page Table Entries (512 * 4KB entries => 2MB)
   310                              <1>     ;
   311 000004F5 B900020000          <1>     mov     ecx, 512
   312                              <1> pageTableEntries4kLoop:
   313 000004FA 89C8                <1>     mov     eax, ecx
   314 000004FC 48                  <1>     dec     eax
   315 000004FD C1E00C              <1>     shl     eax, 12
   316 00000500 0500008000          <1>     add     eax, GHCB_BASE & 0xFFE0_0000
   317 00000505 83C063              <1>     add     eax, PAGE_4K_PDE_ATTR
   318 00000508 8904CDF87F8000      <1>     mov     [ecx * 8 + GHCB_PT_ADDR - 8], eax
   319 0000050F 8914CDFC7F8000      <1>     mov     [(ecx * 8 + GHCB_PT_ADDR - 8) + 4], edx
   320 00000516 E2E2                <1>     loop    pageTableEntries4kLoop
   321                              <1> 
   322                              <1>     ;
   323                              <1>     ; Clear the encryption bit from the GHCB entry
   324                              <1>     ;
   325 00000518 B909000000          <1>     mov     ecx, (GHCB_BASE & 0x1F_FFFF) >> 12
   326 0000051D C704CD048080000000- <1>     mov     [ecx * 8 + GHCB_PT_ADDR + 4], strict dword 0
   326 00000526 0000                <1>
   327                              <1> 
   328                              <1> SevClearPageEncMaskForGhcbPageExit:
   329                              <1>     OneTimeCallRet SevClearPageEncMaskForGhcbPage
    54 00000528 E923FEFFFF          <2>  jmp %1 %+ OneTimerCallReturn
   330                              <1> 
   331                              <1> ; Check if SEV is enabled, and get the C-bit mask above 31.
   332                              <1> ; Modified: EDX
   333                              <1> ;
   334                              <1> ; The value is returned in the EDX
   335                              <1> GetSevCBitMaskAbove31:
   336 0000052D 31D2                <1>     xor       edx, edx
   337                              <1> 
   338                              <1>     ; Check if SEV is enabled
   339 0000052F 803D00B0800001      <1>     cmp       byte[WORK_AREA_GUEST_TYPE], 1
   340 00000536 7506                <1>     jnz       GetSevCBitMaskAbove31Exit
   341                              <1> 
   342 00000538 8B1518B08000        <1>     mov       edx, dword[SEV_ES_WORK_AREA_ENC_MASK + 4]
   343                              <1> 
   344                              <1> GetSevCBitMaskAbove31Exit:
   345                              <1>     OneTimeCallRet GetSevCBitMaskAbove31
    54 0000053E E988FDFFFF          <2>  jmp %1 %+ OneTimerCallReturn
   346                              <1> 
   347                              <1> %endif
   348                              <1> 
   349                              <1> ; Check if Secure Encrypted Virtualization (SEV) features are enabled.
   350                              <1> ;
   351                              <1> ; Register usage is tight in this routine, so multiple calls for the
   352                              <1> ; same CPUID and MSR data are performed to keep things simple.
   353                              <1> ;
   354                              <1> ; Modified:  EAX, EBX, ECX, EDX, ESP
   355                              <1> ;
   356                              <1> ; If SEV is enabled then EAX will be at least 32.
   357                              <1> ; If SEV is disabled then EAX will be zero.
   358                              <1> ;
   359                              <1> CheckSevFeatures:
   360                              <1>     ;
   361                              <1>     ; Clear the workarea, if SEV is enabled then later part of routine
   362                              <1>     ; will populate the workarea fields.
   363                              <1>     ;
   364 00000543 B919000000          <1>     mov    ecx, SEV_ES_WORK_AREA_SIZE
   365 00000548 B804B08000          <1>     mov    eax, SEV_ES_WORK_AREA
   366                              <1> ClearSevEsWorkArea:
   367 0000054D C60000              <1>     mov    byte [eax], 0
   368 00000550 40                  <1>     inc    eax
   369 00000551 E2FA                <1>     loop   ClearSevEsWorkArea
   370                              <1> 
   371                              <1>     ;
   372                              <1>     ; Set up exception handlers to check for SEV-ES
   373                              <1>     ;   Load temporary RAM stack based on PCDs (see SevEsIdtVmmComm for
   374                              <1>     ;   stack usage)
   375                              <1>     ;   Establish exception handlers
   376                              <1>     ;
   377 00000553 BC00008200          <1>     mov       esp, SEV_ES_VC_TOP_OF_STACK
   378 00000558 B88CFDFFFF          <1>     mov       eax, ADDR_OF(Idtr)
   379 0000055D 2E0F0118            <1>     lidt      [cs:eax]
   380                              <1> 
   381                              <1>     ; Check if we have a valid (0x8000_001F) CPUID leaf
   382                              <1>     ;   CPUID raises a #VC exception if running as an SEV-ES guest
   383 00000561 B800000080          <1>     mov       eax, 0x80000000
   384 00000566 0FA2                <1>     cpuid
   385                              <1> 
   386                              <1>     ; This check should fail on Intel or Non SEV AMD CPUs. In future if
   387                              <1>     ; Intel CPUs supports this CPUID leaf then we are guranteed to have exact
   388                              <1>     ; same bit definition.
   389 00000568 3D1F000080          <1>     cmp       eax, 0x8000001f
   390 0000056D 7C6B                <1>     jl        NoSev
   391                              <1> 
   392                              <1>     ; Check for SEV memory encryption feature:
   393                              <1>     ; CPUID  Fn8000_001F[EAX] - Bit 1
   394                              <1>     ;   CPUID raises a #VC exception if running as an SEV-ES guest
   395 0000056F B81F000080          <1>     mov       eax, 0x8000001f
   396 00000574 0FA2                <1>     cpuid
   397 00000576 0FBAE001            <1>     bt        eax, 1
   398 0000057A 735E                <1>     jnc       NoSev
   399                              <1> 
   400                              <1>     ; Check if SEV memory encryption is enabled
   401                              <1>     ;  MSR_0xC0010131 - Bit 0 (SEV enabled)
   402 0000057C B9310101C0          <1>     mov       ecx, SEV_STATUS_MSR
   403 00000581 0F32                <1>     rdmsr
   404 00000583 0FBAE000            <1>     bt        eax, 0
   405 00000587 7351                <1>     jnc       NoSev
   406                              <1> 
   407                              <1>     ; Set the work area header to indicate that the SEV is enabled
   408 00000589 C60500B0800001      <1>     mov     byte[WORK_AREA_GUEST_TYPE], 1
   409                              <1> 
   410                              <1>     ; Save the SevStatus MSR value in the workarea
   411 00000590 A304B08000          <1>     mov     [SEV_ES_WORK_AREA_STATUS_MSR], eax
   412 00000595 891508B08000        <1>     mov     [SEV_ES_WORK_AREA_STATUS_MSR + 4], edx
   413                              <1> 
   414                              <1>     ; Check for SEV-ES memory encryption feature:
   415                              <1>     ; CPUID  Fn8000_001F[EAX] - Bit 3
   416                              <1>     ;   CPUID raises a #VC exception if running as an SEV-ES guest
   417 0000059B B81F000080          <1>     mov       eax, 0x8000001f
   418 000005A0 0FA2                <1>     cpuid
   419 000005A2 0FBAE003            <1>     bt        eax, 3
   420 000005A6 730D                <1>     jnc       GetSevEncBit
   421                              <1> 
   422                              <1>     ; Check if SEV-ES is enabled
   423                              <1>     ;  MSR_0xC0010131 - Bit 1 (SEV-ES enabled)
   424 000005A8 B9310101C0          <1>     mov       ecx, SEV_STATUS_MSR
   425 000005AD 0F32                <1>     rdmsr
   426 000005AF 0FBAE001            <1>     bt        eax, 1
   427 000005B3 7300                <1>     jnc       GetSevEncBit
   428                              <1> 
   429                              <1> GetSevEncBit:
   430                              <1>     ; Get pte bit position to enable memory encryption
   431                              <1>     ; CPUID Fn8000_001F[EBX] - Bits 5:0
   432                              <1>     ;
   433 000005B5 83E33F              <1>     and       ebx, 0x3f
   434 000005B8 89D8                <1>     mov       eax, ebx
   435                              <1> 
   436                              <1>     ; The encryption bit position is always above 31
   437 000005BA 83EB20              <1>     sub       ebx, 32
   438 000005BD 7904                <1>     jns       SevSaveMask
   439                              <1> 
   440                              <1>     ; Encryption bit was reported as 31 or below, enter a HLT loop
   441                              <1> SevEncBitLowHlt:
   442 000005BF FA                  <1>     cli
   443 000005C0 F4                  <1>     hlt
   444 000005C1 EBFC                <1>     jmp       SevEncBitLowHlt
   445                              <1> 
   446                              <1> SevSaveMask:
   447 000005C3 31D2                <1>     xor       edx, edx
   448 000005C5 0FABDA              <1>     bts       edx, ebx
   449                              <1> 
   450 000005C8 C70514B08000000000- <1>     mov       dword[SEV_ES_WORK_AREA_ENC_MASK], 0
   450 000005D1 00                  <1>
   451 000005D2 891518B08000        <1>     mov       dword[SEV_ES_WORK_AREA_ENC_MASK + 4], edx
   452 000005D8 EB0F                <1>     jmp       SevExit
   453                              <1> 
   454                              <1> NoSev:
   455                              <1>     ;
   456                              <1>     ; Perform an SEV-ES sanity check by seeing if a #VC exception occurred.
   457                              <1>     ;
   458                              <1>     ; If SEV-ES is enabled, the CPUID instruction will trigger a #VC exception
   459                              <1>     ; where the RECEIVED_VC offset in the workarea will be set to one.
   460                              <1>     ;
   461 000005DA 803D1CB0800000      <1>     cmp       byte[SEV_ES_WORK_AREA_RECEIVED_VC], 0
   462 000005E1 7404                <1>     jz        NoSevPass
   463                              <1> 
   464                              <1>     ;
   465                              <1>     ; A #VC was received, yet CPUID indicates no SEV-ES support, something
   466                              <1>     ; isn't right.
   467                              <1>     ;
   468                              <1> NoSevEsVcHlt:
   469 000005E3 FA                  <1>     cli
   470 000005E4 F4                  <1>     hlt
   471 000005E5 EBFC                <1>     jmp       NoSevEsVcHlt
   472                              <1> 
   473                              <1> NoSevPass:
   474 000005E7 31C0                <1>     xor       eax, eax
   475                              <1> 
   476                              <1> SevExit:
   477                              <1>     ;
   478                              <1>     ; Clear exception handlers and stack
   479                              <1>     ;
   480 000005E9 50                  <1>     push      eax
   481 000005EA B892FDFFFF          <1>     mov       eax, ADDR_OF(IdtrClear)
   482 000005EF 2E0F0118            <1>     lidt      [cs:eax]
   483 000005F3 58                  <1>     pop       eax
   484 000005F4 BC00000000          <1>     mov       esp, 0
   485                              <1> 
   486                              <1>     OneTimeCallRet CheckSevFeatures
    54 000005F9 E9C8FCFFFF          <2>  jmp %1 %+ OneTimerCallReturn
   487                              <1> 
   488                              <1> ; Start of #VC exception handling routines
   489                              <1> ;
   490                              <1> 
   491                              <1> SevEsIdtNotCpuid:
   492                              <1>     TerminateVmgExit TERM_VC_NOT_CPUID
   252 000005FE B801000000          <2>  mov eax, %1
   253                              <2> 
   254                              <2> 
   255                              <2> 
   256                              <2> 
   257                              <2> 
   258                              <2> 
   259                              <2> 
   260                              <2> 
   261 00000603 C1E010              <2>  shl eax, 16
   262 00000606 0D00110000          <2>  or eax, 0x1100
   263 0000060B 31D2                <2>  xor edx, edx
   264 0000060D B9300101C0          <2>  mov ecx, SEV_GHCB_MSR
   265 00000612 0F30                <2>  wrmsr
   266                              <2> 
   267                              <2> 
   268                              <2> 
   269                              <2> 
   270                              <2> BITS 64
   271 00000614 F30F01D9            <2>  rep vmmcall
   272                              <2> BITS 32
   273                              <2> 
   274                              <2> 
   275                              <2> 
   276                              <2> 
   277                              <2> %%TerminateHlt:
   278 00000618 F4                  <2>  hlt
   279 00000619 EBFD                <2>  jmp %%TerminateHlt
   493 0000061B CF                  <1>     iret
   494                              <1> 
   495                              <1> ; Use the SNP CPUID page to handle the cpuid lookup
   496                              <1> ;
   497                              <1> ;  Modified: EAX, EBX, ECX, EDX
   498                              <1> ;
   499                              <1> ;  Relies on the stack setup/usage in #VC handler:
   500                              <1> ;
   501                              <1> ;    On entry,
   502                              <1> ;      [esp + VC_CPUID_FUNCTION] contains EAX input to cpuid instruction
   503                              <1> ;
   504                              <1> ;    On return, stores corresponding results of CPUID lookup in:
   505                              <1> ;      [esp + VC_CPUID_RESULT_EAX]
   506                              <1> ;      [esp + VC_CPUID_RESULT_EBX]
   507                              <1> ;      [esp + VC_CPUID_RESULT_ECX]
   508                              <1> ;      [esp + VC_CPUID_RESULT_EDX]
   509                              <1> ;
   510                              <1> SnpCpuidLookup:
   511 0000061C 8B44241C            <1>     mov     eax, [esp + VC_CPUID_FUNCTION]
   512 00000620 8B1D00E08000        <1>     mov     ebx, [CPUID_BASE + SNP_CPUID_COUNT]
   513 00000626 B910E08000          <1>     mov     ecx, CPUID_BASE + SNP_CPUID_ENTRY
   514                              <1>     ; Zero these out now so we can simply return if lookup fails
   515 0000062B C7042400000000      <1>     mov     dword[esp + VC_CPUID_RESULT_EAX], 0
   516 00000632 C744240400000000    <1>     mov     dword[esp + VC_CPUID_RESULT_EBX], 0
   517 0000063A C744240800000000    <1>     mov     dword[esp + VC_CPUID_RESULT_ECX], 0
   518 00000642 C744240C00000000    <1>     mov     dword[esp + VC_CPUID_RESULT_EDX], 0
   519                              <1> 
   520                              <1> SnpCpuidCheckEntry:
   521 0000064A 83FB00              <1>     cmp     ebx, 0
   522 0000064D 0F84C0000000        <1>     je      VmmDoneSnpCpuid
   523 00000653 3901                <1>     cmp     dword[ecx + SNP_CPUID_ENTRY_EAX_IN], eax
   524 00000655 7506                <1>     jne     SnpCpuidCheckEntryNext
   525                              <1>     ; As with SEV-ES handler we assume requested CPUID sub-leaf/index is 0
   526 00000657 83790400            <1>     cmp     dword[ecx + SNP_CPUID_ENTRY_ECX_IN], 0
   527 0000065B 7406                <1>     je      SnpCpuidEntryFound
   528                              <1> 
   529                              <1> SnpCpuidCheckEntryNext:
   530 0000065D 4B                  <1>     dec     ebx
   531 0000065E 83C130              <1>     add     ecx, SNP_CPUID_ENTRY_SZ
   532 00000661 EBE7                <1>     jmp     SnpCpuidCheckEntry
   533                              <1> 
   534                              <1> SnpCpuidEntryFound:
   535 00000663 8B4118              <1>     mov     eax, [ecx + SNP_CPUID_ENTRY_EAX]
   536 00000666 890424              <1>     mov     [esp + VC_CPUID_RESULT_EAX], eax
   537 00000669 8B411C              <1>     mov     eax, [ecx + SNP_CPUID_ENTRY_EBX]
   538 0000066C 89442404            <1>     mov     [esp + VC_CPUID_RESULT_EBX], eax
   539 00000670 8B4124              <1>     mov     eax, [ecx + SNP_CPUID_ENTRY_EDX]
   540 00000673 89442408            <1>     mov     [esp + VC_CPUID_RESULT_ECX], eax
   541 00000677 8B4120              <1>     mov     eax, [ecx + SNP_CPUID_ENTRY_ECX]
   542 0000067A 8944240C            <1>     mov     [esp + VC_CPUID_RESULT_EDX], eax
   543 0000067E E990000000          <1>     jmp     VmmDoneSnpCpuid
   544                              <1> 
   545                              <1> ;
   546                              <1> ; Total stack usage for the #VC handler is 44 bytes:
   547                              <1> ;   - 12 bytes for the exception IRET (after popping error code)
   548                              <1> ;   - 32 bytes for the local variables.
   549                              <1> ;
   550                              <1> SevEsIdtVmmComm:
   551                              <1>     ;
   552                              <1>     ; If we're here, then we are an SEV-ES guest and this
   553                              <1>     ; was triggered by a CPUID instruction
   554                              <1>     ;
   555                              <1>     ; Set the recievedVc field in the workarea to communicate that
   556                              <1>     ; a #VC was taken.
   557 00000683 C6051CB0800001      <1>     mov     byte[SEV_ES_WORK_AREA_RECEIVED_VC], 1
   558                              <1> 
   559 0000068A 59                  <1>     pop     ecx                     ; Error code
   560 0000068B 83F972              <1>     cmp     ecx, 0x72               ; Be sure it was CPUID
   561 0000068E 0F856AFFFFFF        <1>     jne     SevEsIdtNotCpuid
   562                              <1> 
   563                              <1>     ; Set up local variable room on the stack
   564                              <1>     ;   CPUID function         : + 28
   565                              <1>     ;   CPUID request register : + 24
   566                              <1>     ;   GHCB MSR (EAX)         : + 20
   567                              <1>     ;   GHCB MSR (EDX)         : + 16
   568                              <1>     ;   CPUID result (EDX)     : + 12
   569                              <1>     ;   CPUID result (ECX)     : + 8
   570                              <1>     ;   CPUID result (EBX)     : + 4
   571                              <1>     ;   CPUID result (EAX)     : + 0
   572 00000694 83EC20              <1>     sub     esp, VC_VARIABLE_SIZE
   573                              <1> 
   574                              <1>     ; Save the CPUID function being requested
   575 00000697 8944241C            <1>     mov     [esp + VC_CPUID_FUNCTION], eax
   576                              <1> 
   577                              <1>     ; If SEV-SNP is enabled, use the CPUID page to handle the CPUID
   578                              <1>     ; instruction.
   579 0000069B B9310101C0          <1>     mov     ecx, SEV_STATUS_MSR
   580 000006A0 0F32                <1>     rdmsr
   581 000006A2 0FBAE002            <1>     bt      eax, 2
   582 000006A6 0F8270FFFFFF        <1>     jc      SnpCpuidLookup
   583                              <1> 
   584                              <1>     ; The GHCB CPUID protocol uses the following mapping to request
   585                              <1>     ; a specific register:
   586                              <1>     ;   0 => EAX, 1 => EBX, 2 => ECX, 3 => EDX
   587                              <1>     ;
   588                              <1>     ; Set EAX as the first register to request. This will also be used as a
   589                              <1>     ; loop variable to request all register values (EAX to EDX).
   590 000006AC 31C0                <1>     xor     eax, eax
   591 000006AE 89442418            <1>     mov     [esp + VC_CPUID_REQUEST_REGISTER], eax
   592                              <1> 
   593                              <1>     ; Save current GHCB MSR value
   594 000006B2 B9300101C0          <1>     mov     ecx, SEV_GHCB_MSR
   595 000006B7 0F32                <1>     rdmsr
   596 000006B9 89442414            <1>     mov     [esp + VC_GHCB_MSR_EAX], eax
   597 000006BD 89542410            <1>     mov     [esp + VC_GHCB_MSR_EDX], edx
   598                              <1> 
   599                              <1> NextReg:
   600                              <1>     ;
   601                              <1>     ; Setup GHCB MSR
   602                              <1>     ;   GHCB_MSR[63:32] = CPUID function
   603                              <1>     ;   GHCB_MSR[31:30] = CPUID register
   604                              <1>     ;   GHCB_MSR[11:0]  = CPUID request protocol
   605                              <1>     ;
   606 000006C1 8B442418            <1>     mov     eax, [esp + VC_CPUID_REQUEST_REGISTER]
   607 000006C5 83F804              <1>     cmp     eax, 4
   608 000006C8 7D3A                <1>     jge     VmmDone
   609                              <1> 
   610 000006CA C1E01E              <1>     shl     eax, GHCB_CPUID_REGISTER_SHIFT
   611 000006CD 8B54241C            <1>     mov     edx, [esp + VC_CPUID_FUNCTION]
   612                              <1> 
   613                              <1>     VmgExit GHCB_CPUID_REQUEST, GHCB_CPUID_RESPONSE
   222                              <2> 
   223                              <2> 
   224                              <2> 
   225 000006D1 83C804              <2>  or eax, %1
   226                              <2> 
   227 000006D4 B9300101C0          <2>  mov ecx, SEV_GHCB_MSR
   228 000006D9 0F30                <2>  wrmsr
   229                              <2> 
   230                              <2> 
   231                              <2> 
   232                              <2> 
   233                              <2> BITS 64
   234 000006DB F30F01D9            <2>  rep vmmcall
   235                              <2> BITS 32
   236                              <2> 
   237 000006DF B9300101C0          <2>  mov ecx, SEV_GHCB_MSR
   238 000006E4 0F32                <2>  rdmsr
   239                              <2> 
   240                              <2> 
   241                              <2> 
   242                              <2> 
   243 000006E6 89C1                <2>  mov ecx, eax
   244 000006E8 81E1FF0F0000        <2>  and ecx, 0xfff
   245 000006EE 83F905              <2>  cmp ecx, %2
   246 000006F1 0F85B9FDFFFF        <2>  jne SevEsUnexpectedRespTerminate
   614                              <1> 
   615                              <1>     ;
   616                              <1>     ; Response GHCB MSR
   617                              <1>     ;   GHCB_MSR[63:32] = CPUID register value
   618                              <1>     ;   GHCB_MSR[31:30] = CPUID register
   619                              <1>     ;   GHCB_MSR[11:0]  = CPUID response protocol
   620                              <1>     ;
   621                              <1> 
   622                              <1>     ; Save returned value
   623 000006F7 C1E81E              <1>     shr     eax, GHCB_CPUID_REGISTER_SHIFT
   624 000006FA 891484              <1>     mov     [esp + eax * 4], edx
   625                              <1> 
   626                              <1>     ; Next register
   627 000006FD 66FF442418          <1>     inc     word [esp + VC_CPUID_REQUEST_REGISTER]
   628                              <1> 
   629 00000702 EBBD                <1>     jmp     NextReg
   630                              <1> 
   631                              <1> VmmDone:
   632                              <1>     ;
   633                              <1>     ; At this point we have all CPUID register values. Restore the GHCB MSR,
   634                              <1>     ; set the return register values and return.
   635                              <1>     ;
   636 00000704 8B442414            <1>     mov     eax, [esp + VC_GHCB_MSR_EAX]
   637 00000708 8B542410            <1>     mov     edx, [esp + VC_GHCB_MSR_EDX]
   638 0000070C B9300101C0          <1>     mov     ecx, SEV_GHCB_MSR
   639 00000711 0F30                <1>     wrmsr
   640                              <1> 
   641                              <1> VmmDoneSnpCpuid:
   642 00000713 8B0424              <1>     mov     eax, [esp + VC_CPUID_RESULT_EAX]
   643 00000716 8B5C2404            <1>     mov     ebx, [esp + VC_CPUID_RESULT_EBX]
   644 0000071A 8B4C2408            <1>     mov     ecx, [esp + VC_CPUID_RESULT_ECX]
   645 0000071E 8B54240C            <1>     mov     edx, [esp + VC_CPUID_RESULT_EDX]
   646                              <1> 
   647 00000722 83C420              <1>     add     esp, VC_VARIABLE_SIZE
   648                              <1> 
   649                              <1>     ; Update the EIP value to skip over the now handled CPUID instruction
   650                              <1>     ; (the CPUID instruction has a length of 2)
   651 00000725 6683042402          <1>     add     word [esp], CPUID_INSN_LEN
   652 0000072A CF                  <1>     iret
   653                              <1> 
   654 0000072B 90                  <1> ALIGN   2
   655                              <1> 
   656                              <1> Idtr:
   657 0000072C FF00                <1>     dw      IDT_END - IDT_BASE - 1  ; Limit
   658 0000072E A0FDFFFF            <1>     dd      ADDR_OF(IDT_BASE)       ; Base
   659                              <1> 
   660                              <1> IdtrClear:
   661 00000732 0000                <1>     dw      0                       ; Limit
   662 00000734 00000000            <1>     dd      0                       ; Base
   663                              <1> 
   664 00000738 90<rep 8h>          <1> ALIGN   16
   665                              <1> 
   666                              <1> ;
   667                              <1> ; The Interrupt Descriptor Table (IDT)
   668                              <1> ;   This will be used to determine if SEV-ES is enabled.  Upon execution
   669                              <1> ;   of the CPUID instruction, a VMM Communication Exception will occur.
   670                              <1> ;   This will tell us if SEV-ES is enabled.  We can use the current value
   671                              <1> ;   of the GHCB MSR to determine the SEV attributes.
   672                              <1> ;
   673                              <1> IDT_BASE:
   674                              <1> ;
   675                              <1> ; Vectors 0 - 28 (No handlers)
   676                              <1> ;
   677                              <1> %rep 29
   678                              <1>     dw      0                                    ; Offset low bits 15..0
   679                              <1>     dw      0x10                                 ; Selector
   680                              <1>     db      0                                    ; Reserved
   681                              <1>     db      0x8E                                 ; Gate Type (IA32_IDT_GATE_TYPE_INTERRUPT_32)
   682                              <1>     dw      0                                    ; Offset high bits 31..16
   683                              <1> %endrep
   678 00000740 0000                <2>  dw 0
   679 00000742 1000                <2>  dw 0x10
   680 00000744 00                  <2>  db 0
   681 00000745 8E                  <2>  db 0x8E
   682 00000746 0000                <2>  dw 0
   678 00000748 0000                <2>  dw 0
   679 0000074A 1000                <2>  dw 0x10
   680 0000074C 00                  <2>  db 0
   681 0000074D 8E                  <2>  db 0x8E
   682 0000074E 0000                <2>  dw 0
   678 00000750 0000                <2>  dw 0
   679 00000752 1000                <2>  dw 0x10
   680 00000754 00                  <2>  db 0
   681 00000755 8E                  <2>  db 0x8E
   682 00000756 0000                <2>  dw 0
   678 00000758 0000                <2>  dw 0
   679 0000075A 1000                <2>  dw 0x10
   680 0000075C 00                  <2>  db 0
   681 0000075D 8E                  <2>  db 0x8E
   682 0000075E 0000                <2>  dw 0
   678 00000760 0000                <2>  dw 0
   679 00000762 1000                <2>  dw 0x10
   680 00000764 00                  <2>  db 0
   681 00000765 8E                  <2>  db 0x8E
   682 00000766 0000                <2>  dw 0
   678 00000768 0000                <2>  dw 0
   679 0000076A 1000                <2>  dw 0x10
   680 0000076C 00                  <2>  db 0
   681 0000076D 8E                  <2>  db 0x8E
   682 0000076E 0000                <2>  dw 0
   678 00000770 0000                <2>  dw 0
   679 00000772 1000                <2>  dw 0x10
   680 00000774 00                  <2>  db 0
   681 00000775 8E                  <2>  db 0x8E
   682 00000776 0000                <2>  dw 0
   678 00000778 0000                <2>  dw 0
   679 0000077A 1000                <2>  dw 0x10
   680 0000077C 00                  <2>  db 0
   681 0000077D 8E                  <2>  db 0x8E
   682 0000077E 0000                <2>  dw 0
   678 00000780 0000                <2>  dw 0
   679 00000782 1000                <2>  dw 0x10
   680 00000784 00                  <2>  db 0
   681 00000785 8E                  <2>  db 0x8E
   682 00000786 0000                <2>  dw 0
   678 00000788 0000                <2>  dw 0
   679 0000078A 1000                <2>  dw 0x10
   680 0000078C 00                  <2>  db 0
   681 0000078D 8E                  <2>  db 0x8E
   682 0000078E 0000                <2>  dw 0
   678 00000790 0000                <2>  dw 0
   679 00000792 1000                <2>  dw 0x10
   680 00000794 00                  <2>  db 0
   681 00000795 8E                  <2>  db 0x8E
   682 00000796 0000                <2>  dw 0
   678 00000798 0000                <2>  dw 0
   679 0000079A 1000                <2>  dw 0x10
   680 0000079C 00                  <2>  db 0
   681 0000079D 8E                  <2>  db 0x8E
   682 0000079E 0000                <2>  dw 0
   678 000007A0 0000                <2>  dw 0
   679 000007A2 1000                <2>  dw 0x10
   680 000007A4 00                  <2>  db 0
   681 000007A5 8E                  <2>  db 0x8E
   682 000007A6 0000                <2>  dw 0
   678 000007A8 0000                <2>  dw 0
   679 000007AA 1000                <2>  dw 0x10
   680 000007AC 00                  <2>  db 0
   681 000007AD 8E                  <2>  db 0x8E
   682 000007AE 0000                <2>  dw 0
   678 000007B0 0000                <2>  dw 0
   679 000007B2 1000                <2>  dw 0x10
   680 000007B4 00                  <2>  db 0
   681 000007B5 8E                  <2>  db 0x8E
   682 000007B6 0000                <2>  dw 0
   678 000007B8 0000                <2>  dw 0
   679 000007BA 1000                <2>  dw 0x10
   680 000007BC 00                  <2>  db 0
   681 000007BD 8E                  <2>  db 0x8E
   682 000007BE 0000                <2>  dw 0
   678 000007C0 0000                <2>  dw 0
   679 000007C2 1000                <2>  dw 0x10
   680 000007C4 00                  <2>  db 0
   681 000007C5 8E                  <2>  db 0x8E
   682 000007C6 0000                <2>  dw 0
   678 000007C8 0000                <2>  dw 0
   679 000007CA 1000                <2>  dw 0x10
   680 000007CC 00                  <2>  db 0
   681 000007CD 8E                  <2>  db 0x8E
   682 000007CE 0000                <2>  dw 0
   678 000007D0 0000                <2>  dw 0
   679 000007D2 1000                <2>  dw 0x10
   680 000007D4 00                  <2>  db 0
   681 000007D5 8E                  <2>  db 0x8E
   682 000007D6 0000                <2>  dw 0
   678 000007D8 0000                <2>  dw 0
   679 000007DA 1000                <2>  dw 0x10
   680 000007DC 00                  <2>  db 0
   681 000007DD 8E                  <2>  db 0x8E
   682 000007DE 0000                <2>  dw 0
   678 000007E0 0000                <2>  dw 0
   679 000007E2 1000                <2>  dw 0x10
   680 000007E4 00                  <2>  db 0
   681 000007E5 8E                  <2>  db 0x8E
   682 000007E6 0000                <2>  dw 0
   678 000007E8 0000                <2>  dw 0
   679 000007EA 1000                <2>  dw 0x10
   680 000007EC 00                  <2>  db 0
   681 000007ED 8E                  <2>  db 0x8E
   682 000007EE 0000                <2>  dw 0
   678 000007F0 0000                <2>  dw 0
   679 000007F2 1000                <2>  dw 0x10
   680 000007F4 00                  <2>  db 0
   681 000007F5 8E                  <2>  db 0x8E
   682 000007F6 0000                <2>  dw 0
   678 000007F8 0000                <2>  dw 0
   679 000007FA 1000                <2>  dw 0x10
   680 000007FC 00                  <2>  db 0
   681 000007FD 8E                  <2>  db 0x8E
   682 000007FE 0000                <2>  dw 0
   678 00000800 0000                <2>  dw 0
   679 00000802 1000                <2>  dw 0x10
   680 00000804 00                  <2>  db 0
   681 00000805 8E                  <2>  db 0x8E
   682 00000806 0000                <2>  dw 0
   678 00000808 0000                <2>  dw 0
   679 0000080A 1000                <2>  dw 0x10
   680 0000080C 00                  <2>  db 0
   681 0000080D 8E                  <2>  db 0x8E
   682 0000080E 0000                <2>  dw 0
   678 00000810 0000                <2>  dw 0
   679 00000812 1000                <2>  dw 0x10
   680 00000814 00                  <2>  db 0
   681 00000815 8E                  <2>  db 0x8E
   682 00000816 0000                <2>  dw 0
   678 00000818 0000                <2>  dw 0
   679 0000081A 1000                <2>  dw 0x10
   680 0000081C 00                  <2>  db 0
   681 0000081D 8E                  <2>  db 0x8E
   682 0000081E 0000                <2>  dw 0
   678 00000820 0000                <2>  dw 0
   679 00000822 1000                <2>  dw 0x10
   680 00000824 00                  <2>  db 0
   681 00000825 8E                  <2>  db 0x8E
   682 00000826 0000                <2>  dw 0
   684                              <1> ;
   685                              <1> ; Vector 29 (VMM Communication Exception)
   686                              <1> ;
   687 00000828 E3FC                <1>     dw      (ADDR_OF(SevEsIdtVmmComm) & 0xffff)  ; Offset low bits 15..0
   688 0000082A 1000                <1>     dw      0x10                                 ; Selector
   689 0000082C 00                  <1>     db      0                                    ; Reserved
   690 0000082D 8E                  <1>     db      0x8E                                 ; Gate Type (IA32_IDT_GATE_TYPE_INTERRUPT_32)
   691 0000082E FFFF                <1>     dw      (ADDR_OF(SevEsIdtVmmComm) >> 16)     ; Offset high bits 31..16
   692                              <1> ;
   693                              <1> ; Vectors 30 - 31 (No handlers)
   694                              <1> ;
   695                              <1> %rep 2
   696                              <1>     dw      0                                    ; Offset low bits 15..0
   697                              <1>     dw      0x10                                 ; Selector
   698                              <1>     db      0                                    ; Reserved
   699                              <1>     db      0x8E                                 ; Gate Type (IA32_IDT_GATE_TYPE_INTERRUPT_32)
   700                              <1>     dw      0                                    ; Offset high bits 31..16
   701                              <1> %endrep
   696 00000830 0000                <2>  dw 0
   697 00000832 1000                <2>  dw 0x10
   698 00000834 00                  <2>  db 0
   699 00000835 8E                  <2>  db 0x8E
   700 00000836 0000                <2>  dw 0
   696 00000838 0000                <2>  dw 0
   697 0000083A 1000                <2>  dw 0x10
   698 0000083C 00                  <2>  db 0
   699 0000083D 8E                  <2>  db 0x8E
   700 0000083E 0000                <2>  dw 0
   702                              <1> IDT_END:
   134                                  
   135                                  %include "Ia16/Real16ToFlat32.asm"
   136                              <1> ;------------------------------------------------------------------------------
   137                              <1> ; @file
   138                              <1> ; Transition from 16 bit real mode into 32 bit flat protected mode
   139                              <1> ;
   140                              <1> ; Copyright (c) 2008 - 2010, Intel Corporation. All rights reserved.<BR>
   141                              <1> ; SPDX-License-Identifier: BSD-2-Clause-Patent
   142                              <1> ;
   143                              <1> ;------------------------------------------------------------------------------
   144                              <1> 
   145                              <1> %define SEC_DEFAULT_CR0  0x40000023
   146                              <1> %define SEC_DEFAULT_CR4  0x640
   147                              <1> 
   148                              <1> BITS    16
   149                              <1> 
   150                              <1> ;
   151                              <1> ; Modified:  EAX, EBX
   152                              <1> ;
   153                              <1> ; @param[out]     DS       Selector allowing flat access to all addresses
   154                              <1> ; @param[out]     ES       Selector allowing flat access to all addresses
   155                              <1> ; @param[out]     FS       Selector allowing flat access to all addresses
   156                              <1> ; @param[out]     GS       Selector allowing flat access to all addresses
   157                              <1> ; @param[out]     SS       Selector allowing flat access to all addresses
   158                              <1> ;
   159                              <1> TransitionFromReal16To32BitFlat:
   160                              <1> 
   161                              <1>     debugShowPostCode POSTCODE_16BIT_MODE
   162                              <1> 
   163 00000840 FA                  <1>     cli
   164                              <1> 
   165 00000841 BB00F0              <1>     mov     bx, 0xf000
   166 00000844 8EDB                <1>     mov     ds, bx
   167                              <1> 
   168 00000846 BBD8FE              <1>     mov     bx, ADDR16_OF(gdtr)
   169                              <1> 
   170 00000849 2E660F0117          <1> o32 lgdt    [cs:bx]
   171                              <1> 
   172 0000084E 66B823000040        <1>     mov     eax, SEC_DEFAULT_CR0
   173 00000854 0F22C0              <1>     mov     cr0, eax
   174                              <1> 
   175 00000857 66EABFFEFFFF1000    <1>     jmp     LINEAR_CODE_SEL:dword ADDR_OF(jumpTo32BitAndLandHere)
   176                              <1> BITS    32
   177                              <1> jumpTo32BitAndLandHere:
   178                              <1> 
   179 0000085F B840060000          <1>     mov     eax, SEC_DEFAULT_CR4
   180 00000864 0F22E0              <1>     mov     cr4, eax
   181                              <1> 
   182                              <1>     debugShowPostCode POSTCODE_32BIT_MODE
   183                              <1> 
   184 00000867 66B80800            <1>     mov     ax, LINEAR_SEL
   185 0000086B 8ED8                <1>     mov     ds, ax
   186 0000086D 8EC0                <1>     mov     es, ax
   187 0000086F 8EE0                <1>     mov     fs, ax
   188 00000871 8EE8                <1>     mov     gs, ax
   189 00000873 8ED0                <1>     mov     ss, ax
   190                              <1> 
   191                              <1>     OneTimeCallRet TransitionFromReal16To32BitFlat
    54 00000875 EB44                <2>  jmp %1 %+ OneTimerCallReturn
   192                              <1> 
   193 00000877 90                  <1> ALIGN   2
   194                              <1> 
   195                              <1> gdtr:
   196 00000878 2700                <1>     dw      GDT_END - GDT_BASE - 1   ; GDT limit
   197 0000087A E0FEFFFF            <1>     dd      ADDR_OF(GDT_BASE)
   198                              <1> 
   199 0000087E 90<rep 2h>          <1> ALIGN   16
   200                              <1> 
   201                              <1> ;
   202                              <1> ; Macros for GDT entries
   203                              <1> ;
   204                              <1> 
   205                              <1> %define  PRESENT_FLAG(p) (p << 7)
   206                              <1> %define  DPL(dpl) (dpl << 5)
   207                              <1> %define  SYSTEM_FLAG(s) (s << 4)
   208                              <1> %define  DESC_TYPE(t) (t)
   209                              <1> 
   210                              <1> ; Type: data, expand-up, writable, accessed
   211                              <1> %define  DATA32_TYPE 3
   212                              <1> 
   213                              <1> ; Type: execute, readable, expand-up, accessed
   214                              <1> %define  CODE32_TYPE 0xb
   215                              <1> 
   216                              <1> ; Type: execute, readable, expand-up, accessed
   217                              <1> %define  CODE64_TYPE 0xb
   218                              <1> 
   219                              <1> %define  GRANULARITY_FLAG(g) (g << 7)
   220                              <1> %define  DEFAULT_SIZE32(d) (d << 6)
   221                              <1> %define  CODE64_FLAG(l) (l << 5)
   222                              <1> %define  UPPER_LIMIT(l) (l)
   223                              <1> 
   224                              <1> ;
   225                              <1> ; The Global Descriptor Table (GDT)
   226                              <1> ;
   227                              <1> 
   228                              <1> GDT_BASE:
   229                              <1> ; null descriptor
   230                              <1> NULL_SEL            equ $-GDT_BASE
   231 00000880 0000                <1>     DW      0            ; limit 15:0
   232 00000882 0000                <1>     DW      0            ; base 15:0
   233 00000884 00                  <1>     DB      0            ; base 23:16
   234 00000885 00                  <1>     DB      0            ; sys flag, dpl, type
   235 00000886 00                  <1>     DB      0            ; limit 19:16, flags
   236 00000887 00                  <1>     DB      0            ; base 31:24
   237                              <1> 
   238                              <1> ; linear data segment descriptor
   239                              <1> LINEAR_SEL          equ $-GDT_BASE
   240 00000888 FFFF                <1>     DW      0xffff       ; limit 15:0
   241 0000088A 0000                <1>     DW      0            ; base 15:0
   242 0000088C 00                  <1>     DB      0            ; base 23:16
   243 0000088D 93                  <1>     DB      PRESENT_FLAG(1)|DPL(0)|SYSTEM_FLAG(1)|DESC_TYPE(DATA32_TYPE)
   244 0000088E CF                  <1>     DB      GRANULARITY_FLAG(1)|DEFAULT_SIZE32(1)|CODE64_FLAG(0)|UPPER_LIMIT(0xf)
   245 0000088F 00                  <1>     DB      0            ; base 31:24
   246                              <1> 
   247                              <1> ; linear code segment descriptor
   248                              <1> LINEAR_CODE_SEL     equ $-GDT_BASE
   249 00000890 FFFF                <1>     DW      0xffff       ; limit 15:0
   250 00000892 0000                <1>     DW      0            ; base 15:0
   251 00000894 00                  <1>     DB      0            ; base 23:16
   252 00000895 9B                  <1>     DB      PRESENT_FLAG(1)|DPL(0)|SYSTEM_FLAG(1)|DESC_TYPE(CODE32_TYPE)
   253 00000896 CF                  <1>     DB      GRANULARITY_FLAG(1)|DEFAULT_SIZE32(1)|CODE64_FLAG(0)|UPPER_LIMIT(0xf)
   254 00000897 00                  <1>     DB      0            ; base 31:24
   255                              <1> 
   256                              <1> %ifdef ARCH_X64
   257                              <1> ; linear code (64-bit) segment descriptor
   258                              <1> LINEAR_CODE64_SEL   equ $-GDT_BASE
   259 00000898 FFFF                <1>     DW      0xffff       ; limit 15:0
   260 0000089A 0000                <1>     DW      0            ; base 15:0
   261 0000089C 00                  <1>     DB      0            ; base 23:16
   262 0000089D 9B                  <1>     DB      PRESENT_FLAG(1)|DPL(0)|SYSTEM_FLAG(1)|DESC_TYPE(CODE64_TYPE)
   263 0000089E AF                  <1>     DB      GRANULARITY_FLAG(1)|DEFAULT_SIZE32(0)|CODE64_FLAG(1)|UPPER_LIMIT(0xf)
   264 0000089F 00                  <1>     DB      0            ; base 31:24
   265                              <1> %endif
   266                              <1> 
   267                              <1> ; linear code segment descriptor
   268                              <1> LINEAR_CODE16_SEL     equ $-GDT_BASE
   269 000008A0 FFFF                <1>     DW      0xffff       ; limit 15:0
   270 000008A2 0000                <1>     DW      0            ; base 15:0
   271 000008A4 00                  <1>     DB      0            ; base 23:16
   272 000008A5 9B                  <1>     DB      PRESENT_FLAG(1)|DPL(0)|SYSTEM_FLAG(1)|DESC_TYPE(CODE32_TYPE)
   273 000008A6 8F                  <1>     DB      GRANULARITY_FLAG(1)|DEFAULT_SIZE32(0)|CODE64_FLAG(0)|UPPER_LIMIT(0xf)
   274 000008A7 00                  <1>     DB      0            ; base 31:24
   275                              <1> 
   276                              <1> GDT_END:
   277                              <1> 
   136                                  %include "Ia16/Init16.asm"
   137                              <1> ;------------------------------------------------------------------------------
   138                              <1> ; @file
   139                              <1> ; 16-bit initialization code
   140                              <1> ;
   141                              <1> ; Copyright (c) 2008 - 2009, Intel Corporation. All rights reserved.<BR>
   142                              <1> ; SPDX-License-Identifier: BSD-2-Clause-Patent
   143                              <1> ;
   144                              <1> ;------------------------------------------------------------------------------
   145                              <1> 
   146                              <1> 
   147                              <1> BITS    16
   148                              <1> 
   149                              <1> ;
   150                              <1> ; @param[out] DI    'BP' to indicate boot-strap processor
   151                              <1> ;
   152                              <1> EarlyBspInitReal16:
   153 000008A8 BF4250              <1>     mov     di, 'BP'
   154 000008AB EB0A                <1>     jmp     short Main16
   155                              <1> 
   156                              <1> ;
   157                              <1> ; @param[out] DI    'AP' to indicate application processor
   158                              <1> ;
   159                              <1> EarlyApInitReal16:
   160 000008AD BF4150              <1>     mov     di, 'AP'
   161 000008B0 EB05                <1>     jmp     short Main16
   162                              <1> 
   163                              <1> ;
   164                              <1> ; Modified:  EAX
   165                              <1> ;
   166                              <1> ; @param[in]  EAX   Initial value of the EAX register (BIST: Built-in Self Test)
   167                              <1> ; @param[out] ESP   Initial value of the EAX register (BIST: Built-in Self Test)
   168                              <1> ;
   169                              <1> EarlyInit16:
   170                              <1>     ;
   171                              <1>     ; ESP -  Initial value of the EAX register (BIST: Built-in Self Test)
   172                              <1>     ;
   173 000008B2 6689C4              <1>     mov     esp, eax
   174                              <1> 
   175                              <1>     debugInitialize
    57                              <2> 
    58                              <2> 
    59                              <2> 
   176                              <1> 
   177                              <1>     OneTimeCallRet EarlyInit16
    54 000008B5 EB02                <2>  jmp %1 %+ OneTimerCallReturn
   178                              <1> 
   137                                  
   138                                  %include "Main.asm"
   139                              <1> ;------------------------------------------------------------------------------
   140                              <1> ; @file
   141                              <1> ; Main routine of the pre-SEC code up through the jump into SEC
   142                              <1> ;
   143                              <1> ; Copyright (c) 2008 - 2009, Intel Corporation. All rights reserved.<BR>
   144                              <1> ; SPDX-License-Identifier: BSD-2-Clause-Patent
   145                              <1> ;
   146                              <1> ;------------------------------------------------------------------------------
   147                              <1> 
   148                              <1> 
   149                              <1> BITS    16
   150                              <1> 
   151                              <1> ;
   152                              <1> ; Modified:  EBX, ECX, EDX, EBP
   153                              <1> ;
   154                              <1> ; @param[in,out]  RAX/EAX  Initial value of the EAX register
   155                              <1> ;                          (BIST: Built-in Self Test)
   156                              <1> ; @param[in,out]  DI       'BP': boot-strap processor, or
   157                              <1> ;                          'AP': application processor
   158                              <1> ; @param[out]     RBP/EBP  Address of Boot Firmware Volume (BFV)
   159                              <1> ; @param[out]     DS       Selector allowing flat access to all addresses
   160                              <1> ; @param[out]     ES       Selector allowing flat access to all addresses
   161                              <1> ; @param[out]     FS       Selector allowing flat access to all addresses
   162                              <1> ; @param[out]     GS       Selector allowing flat access to all addresses
   163                              <1> ; @param[out]     SS       Selector allowing flat access to all addresses
   164                              <1> ;
   165                              <1> ; @return         None  This routine jumps to SEC and does not return
   166                              <1> ;
   167                              <1> Main16:
   168                              <1>     OneTimeCall EarlyInit16
    49 000008B7 EBF9                <2>  jmp %1
    50                              <2> %1 %+ OneTimerCallReturn:
   169                              <1> 
   170                              <1>     ;
   171                              <1>     ; Transition the processor from 16-bit real mode to 32-bit flat mode
   172                              <1>     ;
   173                              <1>     OneTimeCall TransitionFromReal16To32BitFlat
    49 000008B9 EB85                <2>  jmp %1
    50                              <2> %1 %+ OneTimerCallReturn:
   174                              <1> 
   175                              <1> BITS    32
   176                              <1> 
   177                              <1>     ; Clear the WorkArea header. The SEV probe routines will populate the
   178                              <1>     ; work area when detected.
   179 000008BB C60500B0800000      <1>     mov     byte[WORK_AREA_GUEST_TYPE], 0
   180                              <1> 
   181                              <1> %ifdef ARCH_X64
   182                              <1> 
   183 000008C2 EB05                <1>     jmp SearchBfv
   184                              <1> 
   185                              <1> ;
   186                              <1> ; Entry point of Main32
   187                              <1> ;
   188                              <1> Main32:
   189                              <1>     OneTimeCall InitTdx
    49 000008C4 E94AFBFFFF          <2>  jmp %1
    50                              <2> %1 %+ OneTimerCallReturn:
   190                              <1> 
   191                              <1> SearchBfv:
   192                              <1> 
   193                              <1> %endif
   194                              <1> 
   195                              <1>     ;
   196                              <1>     ; Search for the Boot Firmware Volume (BFV)
   197                              <1>     ;
   198                              <1>     OneTimeCall Flat32SearchForBfvBase
    49 000008C9 E932F7FFFF          <2>  jmp %1
    50                              <2> %1 %+ OneTimerCallReturn:
   199                              <1> 
   200                              <1>     ;
   201                              <1>     ; EBP - Start of BFV
   202                              <1>     ;
   203                              <1> 
   204                              <1>     ;
   205                              <1>     ; Search for the SEC entry point
   206                              <1>     ;
   207                              <1>     OneTimeCall Flat32SearchForSecEntryPoint
    49 000008CE E9A4F7FFFF          <2>  jmp %1
    50                              <2> %1 %+ OneTimerCallReturn:
   208                              <1> 
   209                              <1>     ;
   210                              <1>     ; ESI - SEC Core entry point
   211                              <1>     ; EBP - Start of BFV
   212                              <1>     ;
   213                              <1> 
   214                              <1> %ifdef ARCH_IA32
   215                              <1> 
   216                              <1>     ;
   217                              <1>     ; SEV support can be built and run using the Ia32/X64 split environment.
   218                              <1>     ; Set the OVMF/SEV work area as appropriate.
   219                              <1>     ;
   220                              <1>     OneTimeCall CheckSevFeatures
   221                              <1> 
   222                              <1>     ;
   223                              <1>     ; Restore initial EAX value into the EAX register
   224                              <1>     ;
   225                              <1>     mov     eax, esp
   226                              <1> 
   227                              <1>     ;
   228                              <1>     ; Jump to the 32-bit SEC entry point
   229                              <1>     ;
   230                              <1>     jmp     esi
   231                              <1> 
   232                              <1> %else
   233                              <1> 
   234                              <1>     ;
   235                              <1>     ; Transition the processor from 32-bit flat mode to 64-bit flat mode
   236                              <1>     ;
   237                              <1>     OneTimeCall Transition32FlatTo64Flat
    49 000008D3 E948F9FFFF          <2>  jmp %1
    50                              <2> %1 %+ OneTimerCallReturn:
   238                              <1> 
   239                              <1> BITS    64
   240                              <1> 
   241                              <1>     ;
   242                              <1>     ; Some values were calculated in 32-bit mode.  Make sure the upper
   243                              <1>     ; 32-bits of 64-bit registers are zero for these values.
   244                              <1>     ;
   245 000008D8 B8FFFFFFFF          <1>     mov     rax, 0x00000000ffffffff
   246 000008DD 4821C6              <1>     and     rsi, rax
   247 000008E0 4821C5              <1>     and     rbp, rax
   248 000008E3 4821C4              <1>     and     rsp, rax
   249                              <1> 
   250                              <1>     ;
   251                              <1>     ; RSI - SEC Core entry point
   252                              <1>     ; RBP - Start of BFV
   253                              <1>     ;
   254                              <1> 
   255                              <1>     ;
   256                              <1>     ; Restore initial EAX value into the RAX register
   257                              <1>     ;
   258 000008E6 4889E0              <1>     mov     rax, rsp
   259                              <1> 
   260                              <1>     ;
   261                              <1>     ; Jump to the 64-bit SEC entry point
   262                              <1>     ;
   263 000008E9 FFE6                <1>     jmp     rsi
   264                              <1> 
   265                              <1> %endif
   139                                  
   140                                    %define SEV_ES_AP_RESET_IP 8433668
   141                                    %define SEV_LAUNCH_SECRET_BASE 00h
   142                                    %define SEV_LAUNCH_SECRET_SIZE 00h
   143                                    %define SEV_FW_HASH_BLOCK_BASE 00h
   144                                    %define SEV_FW_HASH_BLOCK_SIZE 00h
   145                                  %include "Ia16/ResetVectorVtf0.asm"
   146                              <1> ;------------------------------------------------------------------------------
   147                              <1> ; @file
   148                              <1> ; First code executed by processor after resetting.
   149                              <1> ; Derived from UefiCpuPkg/ResetVector/Vtf0/Ia16/ResetVectorVtf0.asm
   150                              <1> ;
   151                              <1> ; Copyright (c) 2008 - 2014, Intel Corporation. All rights reserved.<BR>
   152                              <1> ; SPDX-License-Identifier: BSD-2-Clause-Patent
   153                              <1> ;
   154                              <1> ;------------------------------------------------------------------------------
   155                              <1> 
   156                              <1> BITS    16
   157                              <1> 
   158 000008EB 90<rep 5h>          <1> ALIGN   16
   159                              <1> 
   160                              <1> ;
   161                              <1> ; Pad the image size to 4k when page tables are in VTF0
   162                              <1> ;
   163                              <1> ; If the VTF0 image has page tables built in, then we need to make
   164                              <1> ; sure the end of VTF0 is 4k above where the page tables end.
   165                              <1> ;
   166                              <1> ; This is required so the page tables will be 4k aligned when VTF0 is
   167                              <1> ; located just below 0x100000000 (4GB) in the firmware device.
   168                              <1> ;
   169                              <1> %ifdef ALIGN_TOP_TO_4K_FOR_PAGING
   170                              <1>     TIMES (0x1000 - ($ - EndOfPageTables) - 0x20) DB 0
   171                              <1> %endif
   172                              <1> 
   173                              <1> ;
   174                              <1> ; Padding to ensure first guid starts at 0xffffffd0
   175                              <1> ;
   176 000008F0 00<rep 8h>          <1> TIMES (15 - ((guidedStructureEnd - guidedStructureStart + 15) % 16)) DB 0
   177                              <1> 
   178                              <1> ; GUIDed structure.  To traverse this you should first verify the
   179                              <1> ; presence of the table footer guid
   180                              <1> ; (96b582de-1fb2-45f7-baea-a366c55a082d) at 0xffffffd0.  If that
   181                              <1> ; is found, the two bytes at 0xffffffce are the entire table length.
   182                              <1> ;
   183                              <1> ; The table is composed of structures with the form:
   184                              <1> ;
   185                              <1> ; Data (arbitrary bytes identified by guid)
   186                              <1> ; length from start of data to end of guid (2 bytes)
   187                              <1> ; guid (16 bytes)
   188                              <1> ;
   189                              <1> ; so work back from the footer using the length to traverse until you
   190                              <1> ; either find the guid you're looking for or run off the beginning of
   191                              <1> ; the table.
   192                              <1> ;
   193                              <1> guidedStructureStart:
   194                              <1> 
   195                              <1> %ifdef ARCH_X64
   196                              <1> ;
   197                              <1> ; TDX Metadata offset block
   198                              <1> ;
   199                              <1> ; TdxMetadata.asm is included in ARCH_X64 because Inte TDX is only
   200                              <1> ; available in ARCH_X64. Below block describes the offset of
   201                              <1> ; TdxMetadata block in Ovmf image
   202                              <1> ;
   203                              <1> ; GUID : e47a6535-984a-4798-865e-4685a7bf8ec2
   204                              <1> ;
   205                              <1> tdxMetadataOffsetStart:
   206 000008F8 50080000            <1>     DD      fourGigabytes - TdxMetadataGuid - 16
   207 000008FC 1600                <1>     DW      tdxMetadataOffsetEnd - tdxMetadataOffsetStart
   208 000008FE 35657AE44A989847    <1>     DB      0x35, 0x65, 0x7a, 0xe4, 0x4a, 0x98, 0x98, 0x47
   209 00000906 865E4685A7BF8EC2    <1>     DB      0x86, 0x5e, 0x46, 0x85, 0xa7, 0xbf, 0x8e, 0xc2
   210                              <1> tdxMetadataOffsetEnd:
   211                              <1> 
   212                              <1> ;
   213                              <1> ; SEV metadata descriptor
   214                              <1> ;
   215                              <1> ; Provide the start offset of the metadata blob within the OVMF binary.
   216                              <1> 
   217                              <1> ; GUID : dc886566-984a-4798-A75e-5585a7bf67cc
   218                              <1> ;
   219                              <1> OvmfSevMetadataOffsetStart:
   220 0000090E 3C050000            <1>   DD      (fourGigabytes - OvmfSevMetadataGuid)
   221 00000912 1600                <1>   DW      OvmfSevMetadataOffsetEnd - OvmfSevMetadataOffsetStart
   222 00000914 666588DC4A989847    <1>   DB      0x66, 0x65, 0x88, 0xdc, 0x4a, 0x98, 0x98, 0x47
   223 0000091C A75E5585A7BF67CC    <1>   DB      0xA7, 0x5e, 0x55, 0x85, 0xa7, 0xbf, 0x67, 0xcc
   224                              <1> OvmfSevMetadataOffsetEnd:
   225                              <1> 
   226                              <1> %endif
   227                              <1> 
   228                              <1> ; SEV Hash Table Block
   229                              <1> ;
   230                              <1> ; This describes the guest ram area where the hypervisor should
   231                              <1> ; install a table describing the hashes of certain firmware configuration
   232                              <1> ; device files that would otherwise be passed in unchecked.  The current
   233                              <1> ; use is for the kernel, initrd and command line values, but others may be
   234                              <1> ; added.  The data format is:
   235                              <1> ;
   236                              <1> ; base physical address (32 bit word)
   237                              <1> ; table length (32 bit word)
   238                              <1> ;
   239                              <1> ; GUID (SEV FW config hash block): 7255371f-3a3b-4b04-927b-1da6efa8d454
   240                              <1> ;
   241                              <1> sevFwHashBlockStart:
   242 00000924 00000000            <1>     DD      SEV_FW_HASH_BLOCK_BASE
   243 00000928 00000000            <1>     DD      SEV_FW_HASH_BLOCK_SIZE
   244 0000092C 1A00                <1>     DW      sevFwHashBlockEnd - sevFwHashBlockStart
   245 0000092E 1F3755723B3A044B    <1>     DB      0x1f, 0x37, 0x55, 0x72, 0x3b, 0x3a, 0x04, 0x4b
   246 00000936 927B1DA6EFA8D454    <1>     DB      0x92, 0x7b, 0x1d, 0xa6, 0xef, 0xa8, 0xd4, 0x54
   247                              <1> sevFwHashBlockEnd:
   248                              <1> 
   249                              <1> ; SEV Secret block
   250                              <1> ;
   251                              <1> ; This describes the guest ram area where the hypervisor should
   252                              <1> ; inject the secret.  The data format is:
   253                              <1> ;
   254                              <1> ; base physical address (32 bit word)
   255                              <1> ; table length (32 bit word)
   256                              <1> ;
   257                              <1> ; GUID (SEV secret block): 4c2eb361-7d9b-4cc3-8081-127c90d3d294
   258                              <1> ;
   259                              <1> sevSecretBlockStart:
   260 0000093E 00000000            <1>     DD      SEV_LAUNCH_SECRET_BASE
   261 00000942 00000000            <1>     DD      SEV_LAUNCH_SECRET_SIZE
   262 00000946 1A00                <1>     DW      sevSecretBlockEnd - sevSecretBlockStart
   263 00000948 61B32E4C9B7DC34C    <1>     DB      0x61, 0xB3, 0x2E, 0x4C, 0x9B, 0x7D, 0xC3, 0x4C
   264 00000950 8081127C90D3D294    <1>     DB      0x80, 0x81, 0x12, 0x7C, 0x90, 0xD3, 0xD2, 0x94
   265                              <1> sevSecretBlockEnd:
   266                              <1> 
   267                              <1> ;
   268                              <1> ; SEV-ES Processor Reset support
   269                              <1> ;
   270                              <1> ; sevEsResetBlock:
   271                              <1> ;   For the initial boot of an AP under SEV-ES, the "reset" RIP must be
   272                              <1> ;   programmed to the RAM area defined by SEV_ES_AP_RESET_IP. The data
   273                              <1> ;   format is:
   274                              <1> ;
   275                              <1> ;   IP value [0:15]
   276                              <1> ;   CS segment base [31:16]
   277                              <1> ;
   278                              <1> ;   GUID (SEV-ES reset block): 00f771de-1a7e-4fcb-890e-68c77e2fb44e
   279                              <1> ;
   280                              <1> ;   A hypervisor reads the CS segement base and IP value. The CS segment base
   281                              <1> ;   value represents the high order 16-bits of the CS segment base, so the
   282                              <1> ;   hypervisor must left shift the value of the CS segement base by 16 bits to
   283                              <1> ;   form the full CS segment base for the CS segment register. It would then
   284                              <1> ;   program the EIP register with the IP value as read.
   285                              <1> ;
   286                              <1> 
   287                              <1> sevEsResetBlockStart:
   288 00000958 04B08000            <1>     DD      SEV_ES_AP_RESET_IP
   289 0000095C 1600                <1>     DW      sevEsResetBlockEnd - sevEsResetBlockStart
   290 0000095E DE71F7007E1ACB4F    <1>     DB      0xDE, 0x71, 0xF7, 0x00, 0x7E, 0x1A, 0xCB, 0x4F
   291 00000966 890E68C77E2FB44E    <1>     DB      0x89, 0x0E, 0x68, 0xC7, 0x7E, 0x2F, 0xB4, 0x4E
   292                              <1> sevEsResetBlockEnd:
   293                              <1> 
   294                              <1> ;
   295                              <1> ; Table footer:
   296                              <1> ;
   297                              <1> ; length of whole table (16 bit word)
   298                              <1> ; GUID (table footer): 96b582de-1fb2-45f7-baea-a366c55a082d
   299                              <1> ;
   300 0000096E 8800                <1>     DW      guidedStructureEnd - guidedStructureStart
   301 00000970 DE82B596B21FF745    <1>     DB      0xDE, 0x82, 0xB5, 0x96, 0xB2, 0x1F, 0xF7, 0x45
   302 00000978 BAEAA366C55A082D    <1>     DB      0xBA, 0xEA, 0xA3, 0x66, 0xC5, 0x5A, 0x08, 0x2D
   303                              <1> 
   304                              <1> guidedStructureEnd:
   305                              <1> 
   306                              <1> ALIGN   16
   307                              <1> 
   308                              <1> applicationProcessorEntryPoint:
   309                              <1> ;
   310                              <1> ; Application Processors entry point
   311                              <1> ;
   312                              <1> ; GenFv generates code aligned on a 4k boundary which will jump to this
   313                              <1> ; location.  (0xffffffe0)  This allows the Local APIC Startup IPI to be
   314                              <1> ; used to wake up the application processors.
   315                              <1> ;
   316 00000980 E92AFF              <1>     jmp     EarlyApInitReal16
   317                              <1> 
   318 00000983 90<rep 5h>          <1> ALIGN   8
   319                              <1> 
   320 00000988 00000000            <1>     DD      0
   321                              <1> 
   322                              <1> ;
   323                              <1> ; The VTF signature
   324                              <1> ;
   325                              <1> ; VTF-0 means that the VTF (Volume Top File) code does not require
   326                              <1> ; any fixups.
   327                              <1> ;
   328                              <1> vtfSignature:
   329 0000098C 56544600            <1>     DB      'V', 'T', 'F', 0
   330                              <1> 
   331                              <1> ALIGN   16
   332                              <1> 
   333                              <1> resetVector:
   334                              <1> ;
   335                              <1> ; Reset Vector
   336                              <1> ;
   337                              <1> ; This is where the processor will begin execution
   338                              <1> ;
   339                              <1> ; In IA32 we follow the standard reset vector flow. While in X64, Td guest
   340                              <1> ; may be supported. Td guest requires the startup mode to be 32-bit
   341                              <1> ; protected mode but the legacy VM startup mode is 16-bit real mode.
   342                              <1> ; To make NASM generate such shared entry code that behaves correctly in
   343                              <1> ; both 16-bit and 32-bit mode, more BITS directives are added.
   344                              <1> ;
   345                              <1> %ifdef ARCH_IA32
   346                              <1>     nop
   347                              <1>     nop
   348                              <1>     jmp     EarlyBspInitReal16
   349                              <1> 
   350                              <1> %else
   351                              <1> 
   352 00000990 0F20C0              <1>     mov     eax, cr0
   353 00000993 A801                <1>     test    al, 1
   354 00000995 7405                <1>     jz      .Real
   355                              <1> BITS 32
   356 00000997 E928FFFFFF          <1>     jmp     Main32
   357                              <1> BITS 16
   358                              <1> .Real:
   359 0000099C E909FF              <1>     jmp     EarlyBspInitReal16
   360                              <1> 
   361                              <1> %endif
   362                              <1> 
   363 0000099F 90                  <1> ALIGN   16
   364                              <1> 
   365                              <1> fourGigabytes:
   366                              <1> 
